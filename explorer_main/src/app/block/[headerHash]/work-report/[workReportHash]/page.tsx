"use client";

import React, { useEffect, useState } from "react";
import { useParams } from "next/navigation";
import {
  Container,
  Paper,
  Typography,
  Divider,
  Link as MuiLink,
} from "@mui/material";
import { LabeledRow } from "../../../../../components/details/LabeledRow"; // adjust the import path as needed
import { db, BlockRecord } from "../../../../../../db";
import { Guarantee } from "@/types";

export default function WorkReportDetailPage() {
  const params = useParams();
  const headerHash = params.headerHash as string;
  const workReportHash = params.workReportHash as string;

  const [workReport, setWorkReport] = useState<Guarantee | null>(null);

  useEffect(() => {
    if (headerHash && workReportHash) {
      db.blocks
        .where("headerHash")
        .equals(headerHash)
        .first()
        .then((record: BlockRecord | undefined) => {
          if (record && record.block && record.block.extrinsic) {
            const reports = record.block.extrinsic.guarantees || [];
            const found = reports.find(
              (r: Guarantee) => r.report.package_spec.hash === workReportHash
            );
            setWorkReport(found);
            console.log(record);
          }
        })
        .catch((error) => {
          console.error("Error loading work report:", error);
        });
    }
  }, [headerHash, workReportHash]);

  if (!workReport) {
    return (
      <Container maxWidth="lg" sx={{ mt: 4 }}>
        <Paper sx={{ p: 3 }}>
          <Typography variant="h4" gutterBottom>
            Work Report Details
          </Typography>
          <Typography variant="body1">
            Loading work report details...
          </Typography>
        </Paper>
      </Container>
    );
  }

  // Destructure fields from the work report
  const { report, slot, signatures } = workReport;
  const { package_spec, context, core_index, authorizer_hash, auth_output } =
    report;

  // Define mapping arrays for each section

  const basicInfoMapping = [
    {
      label: "Work Report Hash:",
      tooltip:
        "Unique identifier of the work report derived from the package specification.",
      value: package_spec.hash,
    },
    {
      label: "Header Hash:",
      tooltip: "Block header hash. Click to view block details.",
      value: (
        <MuiLink
          href={`/block/${headerHash}`}
          sx={{ textDecoration: "underline" }}
        >
          {headerHash}
        </MuiLink>
      ),
    },
    {
      label: "Slot:",
      tooltip: "Slot number for the work report's block.",
      value: slot ?? "N/A",
    },
    {
      label: "Core Index:",
      tooltip: "Index of the core that processed the work report.",
      value: core_index ?? "N/A",
    },
  ];

  const packageSpecMapping = [
    {
      label: "Length:",
      tooltip: "Length of the package spec in bytes.",
      value: package_spec.length ?? "N/A",
    },
    {
      label: "Erasure Root:",
      tooltip: "Erasure root hash for data recovery.",
      value: package_spec.erasure_root,
    },
    {
      label: "Exports Root:",
      tooltip: "Exports root hash for the package.",
      value: package_spec.exports_root,
    },
    {
      label: "Exports Count:",
      tooltip: "Number of exports available in the package spec.",
      value: package_spec.exports_count,
    },
  ];

  const contextMapping = [
    {
      label: "Anchor:",
      tooltip: "Context anchor used to tie the state data.",
      value: context.anchor,
    },
    {
      label: "State Root:",
      tooltip: "Root hash of the block's state.",
      value: context.state_root,
    },
    {
      label: "Beefy Root:",
      tooltip: "Beefy consensus protocol root hash.",
      value: context.beefy_root,
    },
    {
      label: "Lookup Anchor:",
      tooltip: "Anchor used for lookup operations.",
      value: context.lookup_anchor,
    },
    {
      label: "Lookup Anchor Slot:",
      tooltip: "Slot corresponding to the lookup anchor.",
      value: context.lookup_anchor_slot,
    },
    {
      label: "Prerequisites:",
      tooltip: "List of prerequisite hashes required for context.",
      value:
        context.prerequisites && context.prerequisites.length > 0 ? (
          <>
            {context.prerequisites.map((p: string, idx: number) => (
              <Typography key={idx} variant="body2">
                {p}
              </Typography>
            ))}
          </>
        ) : (
          "None"
        ),
    },
  ];

  const authorizationMapping = [
    {
      label: "Authorizer Hash:",
      tooltip: "Hash of the entity that authorized this work report.",
      value: authorizer_hash,
    },
    {
      label: "Auth Output:",
      tooltip: "Output generated by the authorization process.",
      value: auth_output || "0x",
    },
  ];

  return (
    <Container maxWidth="lg" sx={{ mt: 4 }}>
      <Typography variant="h5" sx={{ fontWeight: "bold", mb: 3 }}>
        Work Report Details
      </Typography>
      <Paper variant="outlined" sx={{ p: 3 }}>
        {/* SECTION 1: Basic Info */}
        <Typography variant="h6" sx={{ mb: 2 }}>
          Basic Info
        </Typography>
        {basicInfoMapping.map((item, idx) => (
          <LabeledRow
            key={idx}
            label={item.label}
            tooltip={item.tooltip}
            value={item.value}
          />
        ))}

        <Divider sx={{ my: 2 }} />

        {/* SECTION 2: Package Spec */}
        <Typography variant="h6" sx={{ mb: 2 }}>
          Package Spec
        </Typography>
        {packageSpecMapping.map((item, idx) => (
          <LabeledRow
            key={idx}
            label={item.label}
            tooltip={item.tooltip}
            value={item.value}
          />
        ))}

        <Divider sx={{ my: 2 }} />

        {/* SECTION 3: Context */}
        <Typography variant="h6" sx={{ mb: 2 }}>
          Context
        </Typography>
        {contextMapping.map((item, idx) => (
          <LabeledRow
            key={idx}
            label={item.label}
            tooltip={item.tooltip}
            value={item.value}
          />
        ))}

        <Divider sx={{ my: 2 }} />

        {/* SECTION 4: Authorization */}
        <Typography variant="h6" sx={{ mb: 2 }}>
          Authorization
        </Typography>
        {authorizationMapping.map((item, idx) => (
          <LabeledRow
            key={idx}
            label={item.label}
            tooltip={item.tooltip}
            value={item.value}
          />
        ))}

        <Divider sx={{ my: 2 }} />

        {/* SECTION 6: Signatures */}
        <Typography variant="h6" sx={{ mb: 2 }}>
          Signatures
        </Typography>
        {signatures && signatures.length > 0 ? (
          signatures.map(
            (
              sig: { validator_index: number; signature: string },
              idx: number
            ) => (
              <LabeledRow
                key={idx}
                label={`Validator ${sig.validator_index}:`}
                tooltip="Validator signature for this work report."
                value={sig.signature}
              />
            )
          )
        ) : (
          <Typography>No signatures found.</Typography>
        )}
      </Paper>
    </Container>
  );
}
