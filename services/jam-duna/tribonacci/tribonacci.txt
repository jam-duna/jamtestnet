// RO data = 0/0 bytes
// RW data = 0/0 bytes
// Stack size = 8192 bytes
// Jump table entry point size = 2 bytes
// RO data = []
// RW data = []
// Instructions = 250
// Code size = 728 bytes

      :                          @0
     0: 28 0d 00 00 00           jump @3
      :                          @1
     5: 28 75 00 00 00           jump @8
      :                          @2
    10: 28 27 02                 jump @61
      :                          @3 [export #0: 'refine']
    13: 95 11 d8                 sp = sp + 0xffffffffffffffd8
    16: 7b 10 20                 u64 [sp + 0x20] = ra
    19: 7b 15 18                 u64 [sp + 0x18] = s0
    22: 7b 16 10                 u64 [sp + 0x10] = s1
    25: 49 11 08                 u64 [sp + 8] = 0
    28: 49 01                    u64 [sp + 0] = 0
    30: 33 05 01                 s0 = 0x1
    33: 64 17                    a0 = sp
    35: 33 09 10                 a2 = 0x10
    38: 33 0a 05                 a3 = 0x5
    41: 33 0c 01                 a5 = 0x1
    44: 33 08                    a1 = 0
    46: 33 0b                    a4 = 0
    48: 0a 12                    ecalli 18 // 'fetch'
    50: 01                       fallthrough
      :                          @4
    51: 51 17 ff 1a              jump @6 if a0 == 4294967295
      :                          @5
    55: 81 17 04                 a0 = i32 [sp + 0x4]
    58: 81 18 08                 a1 = i32 [sp + 0x8]
    61: 81 19 0c                 a2 = i32 [sp + 0xc]
    64: 81 15                    s0 = i32 [sp]
    66: c8 78 0a                 a3 = a1 + a0
    69: be a9 09                 i32 a2 = a2 + a3
    72: 83 55 01                 i32 s0 = s0 + 0x1
    75: 28 0a                    jump @7
      :                          @6
    77: 33 07                    a0 = 0
    79: 33 08                    a1 = 0
    81: 33 09 01                 a2 = 0x1
    84: 01                       fallthrough
      :                          @7
    85: 7a 15                    u32 [sp] = s0
    87: 7a 19 04                 u32 [sp + 0x4] = a2
    90: 7a 17 08                 u32 [sp + 0x8] = a0
    93: 7a 18 0c                 u32 [sp + 0xc] = a1
    96: 64 17                    a0 = sp
    98: 33 08 10                 a1 = 0x10
   101: 0a 13                    ecalli 19 // 'export'
   103: 64 17                    a0 = sp
   105: 33 08 10                 a1 = 0x10
   108: 82 10 20                 ra = u64 [sp + 0x20]
   111: 82 15 18                 s0 = u64 [sp + 0x18]
   114: 82 16 10                 s1 = u64 [sp + 0x10]
   117: 95 11 28                 sp = sp + 0x28
   120: 32 00                    ret
      :                          @8 [export #1: 'accumulate']
   122: 95 11 b8                 sp = sp + 0xffffffffffffffb8
   125: 7b 10 40                 u64 [sp + 0x40] = ra
   128: 7b 15 38                 u64 [sp + 0x38] = s0
   131: 7b 16 30                 u64 [sp + 0x30] = s1
   134: 33 09 08                 a2 = 0x8
   137: ac 98 e7 00              jump @38 if a1 <u a2
      :                          @9
   141: 33 09 fc                 a2 = 0xfffffffffffffffc
   144: aa 97 9d 01              jump @57 if a0 == a2
      :                          @10
   148: 51 07 99 01              jump @57 if a0 == 0
      :                          @11
   152: 95 8a f8                 a3 = a1 + 0xfffffffffffffff8
   155: 95 75 08                 s0 = a0 + 0x8
   158: 51 0a 45                 jump @21 if a3 == 0
      :                          @12
   161: 7d 58                    a1 = i8 [s0]
   163: 33 06 01                 s1 = 0x1
   166: 59 08 40                 jump @22 if a1 >=s 0
      :                          @13
   169: 84 89 ff 00              a2 = a1 & 0xff
   173: 33 06 02                 s1 = 0x2
   176: 53 29 c0 00 2d           jump @19 if a2 <u 192
      :                          @14
   181: 33 06 03                 s1 = 0x3
   184: 53 29 e0 00 25           jump @19 if a2 <u 224
      :                          @15
   189: 33 06 04                 s1 = 0x4
   192: 53 29 f0 00 1d           jump @19 if a2 <u 240
      :                          @16
   197: 33 06 05                 s1 = 0x5
   200: 53 29 f8 00 15           jump @19 if a2 <u 248
      :                          @17
   205: 33 06 06                 s1 = 0x6
   208: 53 29 fc 00 0d           jump @19 if a2 <u 252
      :                          @18
   213: 88 98 fe 00              a1 = a2 <u 0xfe
   217: 9a 86 08                 s1 = 0x8 - a1
   220: 01                       fallthrough
      :                          @19
   221: ae 6a 09                 jump @22 if a3 >=u s1
      :                          @20
   224: 28 90 00                 jump @38
      :                          @21
   227: 33 06                    s1 = 0
   229: 01                       fallthrough
      :                          @22
   230: 7b 16                    u64 [sp] = s1
   232: 64 57                    a0 = s0
   234: 64 68                    a1 = s1
   236: 64 a6                    s1 = a3
   238: 50 10 02 4c 01           ra = 2, jump @62
      :                          @23 [@dyn 1]
   243: 82 1a                    a3 = u64 [sp]
   245: 51 07 7b                 jump @38 if a0 == 0
      :                          @24
   248: e4 a6 07                 a0 = maxu(s1, a3)
   251: c9 a7 07                 a0 = a0 - a3
   254: 53 17 60 72              jump @38 if a0 <u 96
      :                          @25
   258: c8 5a 08                 a1 = a3 + s0
   261: 95 76 a0                 s1 = a0 + 0xffffffffffffffa0
   264: 95 87 60                 a0 = a1 + 0x60
   267: 7b 17                    u64 [sp] = a0
   269: 51 06 4c                 jump @36 if s1 == 0
      :                          @26
   272: 7d 78                    a1 = i8 [a0]
   274: 33 05 01                 s0 = 0x1
   277: 59 08 37                 jump @33 if a1 >=s 0
      :                          @27
   280: 84 89 ff 00              a2 = a1 & 0xff
   284: 33 05 02                 s0 = 0x2
   287: 53 29 c0 00 2d           jump @33 if a2 <u 192
      :                          @28
   292: 33 05 03                 s0 = 0x3
   295: 53 29 e0 00 25           jump @33 if a2 <u 224
      :                          @29
   300: 33 05 04                 s0 = 0x4
   303: 53 29 f0 00 1d           jump @33 if a2 <u 240
      :                          @30
   308: 33 05 05                 s0 = 0x5
   311: 53 29 f8 00 15           jump @33 if a2 <u 248
      :                          @31
   316: 33 05 06                 s0 = 0x6
   319: 53 29 fc 00 0d           jump @33 if a2 <u 252
      :                          @32
   324: 88 98 fe 00              a1 = a2 <u 0xfe
   328: 9a 85 08                 s0 = 0x8 - a1
   331: 01                       fallthrough
      :                          @33
   332: ac 56 e2 00              jump @58 if s1 <u s0
      :                          @34
   336: 64 58                    a1 = s0
   338: 50 10 04 e8 00           ra = 4, jump @62
      :                          @35 [@dyn 2]
   343: 28 07                    jump @37
      :                          @36
   345: 33 05                    s0 = 0
   347: 33 07                    a0 = 0
   349: 01                       fallthrough
      :                          @37
   350: e4 56 08                 a1 = maxu(s1, s0)
   353: c9 58 08                 a1 = a1 - s0
   356: e4 78 08                 a1 = maxu(a1, a0)
   359: c9 78 08                 a1 = a1 - a0
   362: 33 09 21                 a2 = 0x21
   365: ae 98 19                 jump @40 if a1 >=u a2
      :                          @38
   368: 33 08                    a1 = 0
   370: 33 07 00 00 01           a0 = 0x10000
   375: 01                       fallthrough
      :                          @39
   376: 82 10 40                 ra = u64 [sp + 0x40]
   379: 82 15 38                 s0 = u64 [sp + 0x38]
   382: 82 16 30                 s1 = u64 [sp + 0x30]
   385: 95 11 48                 sp = sp + 0x48
   388: 32 00                    ret
      :                          @40
   390: 82 19                    a2 = u64 [sp]
   392: c8 95 05                 s0 = s0 + a2
   395: c8 57 07                 a0 = a0 + s0
   398: 7c 79 20                 a2 = u8 [a0 + 0x20]
   401: 51 09 1a                 jump @42 if a2 == 0
      :                          @41
   404: 46 11 0f                 u8 [sp + 15] = 0
   407: 95 17 0f                 a0 = sp + 0xf
   410: 33 08 01                 a1 = 0x1
   413: 33 09                    a2 = 0
   415: 33 0a                    a3 = 0
   417: 0a 03                    ecalli 3 // 'write'
   419: 95 17 10                 a0 = sp + 0x10
   422: 33 08 20                 a1 = 0x20
   425: 28 cf                    jump @39
      :                          @42
   427: 95 8a df                 a3 = a1 + 0xffffffffffffffdf
   430: 95 75 21                 s0 = a0 + 0x21
   433: 51 0a 50                 jump @53 if a3 == 0
      :                          @43
   436: 7d 57                    a0 = i8 [s0]
   438: 33 06 01                 s1 = 0x1
   441: 59 07 37                 jump @50 if a0 >=s 0
      :                          @44
   444: 84 77 ff 00              a0 = a0 & 0xff
   448: 33 06 02                 s1 = 0x2
   451: 53 27 c0 00 2d           jump @50 if a0 <u 192
      :                          @45
   456: 33 06 03                 s1 = 0x3
   459: 53 27 e0 00 25           jump @50 if a0 <u 224
      :                          @46
   464: 33 06 04                 s1 = 0x4
   467: 53 27 f0 00 1d           jump @50 if a0 <u 240
      :                          @47
   472: 33 06 05                 s1 = 0x5
   475: 53 27 f8 00 15           jump @50 if a0 <u 248
      :                          @48
   480: 33 06 06                 s1 = 0x6
   483: 53 27 fc 00 0d           jump @50 if a0 <u 252
      :                          @49
   488: 88 77 fe 00              a0 = a0 <u 0xfe
   492: 9a 76 08                 s1 = 0x8 - a0
   495: 01                       fallthrough
      :                          @50
   496: 7b 1a                    u64 [sp] = a3
   498: ac 6a 3e                 jump @60 if a3 <u s1
      :                          @51
   501: 64 57                    a0 = s0
   503: 64 68                    a1 = s1
   505: 50 10 06 41              ra = 6, jump @62
      :                          @52 [@dyn 3]
   509: 82 1a                    a3 = u64 [sp]
   511: 28 07                    jump @54
      :                          @53
   513: 33 06                    s1 = 0
   515: 33 07                    a0 = 0
   517: 01                       fallthrough
      :                          @54
   518: c8 65 09                 a2 = s0 + s1
   521: e4 6a 08                 a1 = maxu(a3, s1)
   524: c9 68 08                 a1 = a1 - s1
   527: e6 78 05                 s0 = minu(a1, a0)
   530: 46 11 0f                 u8 [sp + 15] = 0
   533: 95 17 0f                 a0 = sp + 0xf
   536: 33 08 01                 a1 = 0x1
   539: 64 5a                    a3 = s0
   541: 0a 03                    ecalli 3 // 'write'
   543: 01                       fallthrough
      :                          @55
   544: 55 15 21 0f              jump @59 if s0 >=u 33
      :                          @56
   548: 95 17 10                 a0 = sp + 0x10
   551: 33 08 20                 a1 = 0x20
   554: 28 4e ff                 jump @39
      :                          @57
   557: 00                       trap
      :                          @58
   558: 00                       trap
      :                          @59
   559: 00                       trap
      :                          @60
   560: 00                       trap
      :                          @61 [export #2: 'on_transfer']
   561: 33 07 00 00 01           a0 = 0x10000
   566: 33 08                    a1 = 0
   568: 32 00                    ret
      :                          @62
   570: 51 08 9b 00              jump @83 if a1 == 0
      :                          @63
   574: 64 79                    a2 = a0
   576: 7c 77                    a0 = u8 [a0]
   578: 51 07 91 00              jump @82 if a0 == 0
      :                          @64
   582: 51 27 ff 00 90 00        jump @84 if a0 == 255
      :                          @65
   588: 6c 7a                    a3 = sext.b a0
   590: 57 0a 09                 jump @67 if a3 <s 0
      :                          @66
   593: 33 0a                    a3 = 0
   595: 33 08                    a1 = 0
   597: 28 73                    jump @81
      :                          @67
   599: 55 27 c0 00 0d           jump @69 if a0 >=u 192
      :                          @68
   604: 33 0a 01                 a3 = 0x1
   607: 33 0b 80                 a4 = 0xffffffffffffff80
   610: 28 4a                    jump @78
      :                          @69
   612: 55 27 e0 00 0e           jump @71 if a0 >=u 224
      :                          @70
   617: 33 0a 02                 a3 = 0x2
   620: 33 0b 40 ff              a4 = 0xffffffffffffff40
   624: 28 3c                    jump @78
      :                          @71
   626: 55 27 f0 00 0e           jump @73 if a0 >=u 240
      :                          @72
   631: 33 0a 03                 a3 = 0x3
   634: 33 0b 20 ff              a4 = 0xffffffffffffff20
   638: 28 2e                    jump @78
      :                          @73
   640: 55 27 f8 00 0e           jump @75 if a0 >=u 248
      :                          @74
   645: 33 0a 04                 a3 = 0x4
   648: 33 0b 10 ff              a4 = 0xffffffffffffff10
   652: 28 20                    jump @78
      :                          @75
   654: 55 27 fc 00 0e           jump @77 if a0 >=u 252
      :                          @76
   659: 33 0a 05                 a3 = 0x5
   662: 33 0b 08 ff              a4 = 0xffffffffffffff08
   666: 28 12                    jump @78
      :                          @77
   668: 88 7a fe 00              a3 = a0 <u 0xfe
   672: 33 0b 04 ff              a4 = 0xffffffffffffff04
   676: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
   680: 85 aa 07                 a3 = a3 ^ 0x7
   683: 01                       fallthrough
      :                          @78
   684: ae 8a 2b                 jump @85 if a3 >=u a1
      :                          @79
   687: 33 08                    a1 = 0
   689: c8 b7 07                 a0 = a0 + a4
   692: 64 ab                    a4 = a3
   694: 01                       fallthrough
      :                          @80
   695: c8 b9 0c                 a5 = a2 + a4
   698: 7c cc                    a5 = u8 [a5]
   700: 97 88 08                 a1 = a1 << 0x8
   703: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
   706: d4 c8 08                 a1 = a1 | a5
   709: 52 0b f2                 jump @80 if a4 != 0
      :                          @81
   712: 8a a9 03                 i32 a2 = a3 << 0x3
   715: cf 97 07                 a0 = a0 << a2
   718: c8 87 07                 a0 = a0 + a1
   721: 32 00                    ret
      :                          @82
   723: 32 00                    ret
      :                          @83
   725: 00                       trap
      :                          @84
   726: 00                       trap
      :                          @85
   727: 00                       trap
