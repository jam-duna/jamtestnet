// RO data = 0/0 bytes
// RW data = 0/0 bytes
// Stack size = 8192 bytes
// Jump table entry point size = 2 bytes
// RO data = []
// RW data = []
// Instructions = 248
// Code size = 721 bytes

      :                          @0
     0: 28 0d 00 00 00           jump @3
      :                          @1
     5: 28 6e 00 00 00           jump @8
      :                          @2
    10: 28 20 02                 jump @61
      :                          @3 [export #0: 'refine']
    13: 95 11 e0                 sp = sp + 0xffffffffffffffe0
    16: 7b 10 18                 u64 [sp + 0x18] = ra
    19: 7b 15 10                 u64 [sp + 0x10] = s0
    22: 49 11 08                 u64 [sp + 8] = 0
    25: 49 01                    u64 [sp + 0] = 0
    27: 64 17                    a0 = sp
    29: 33 09 10                 a2 = 0x10
    32: 33 0a 05                 a3 = 0x5
    35: 33 08                    a1 = 0
    37: 33 0b                    a4 = 0
    39: 33 0c                    a5 = 0
    41: 0a 12                    ecalli 18 // 'fetch'
    43: 01                       fallthrough
      :                          @4
    44: 51 17 ff 1a              jump @6 if a0 == 4294967295
      :                          @5
    48: 81 17 04                 a0 = i32 [sp + 0x4]
    51: 81 18 08                 a1 = i32 [sp + 0x8]
    54: 81 19 0c                 a2 = i32 [sp + 0xc]
    57: 81 1a                    a3 = i32 [sp]
    59: c8 78 0b                 a4 = a1 + a0
    62: be b9 09                 i32 a2 = a2 + a4
    65: 83 aa 01                 i32 a3 = a3 + 0x1
    68: 28 0d                    jump @7
      :                          @6
    70: 33 07                    a0 = 0
    72: 33 08                    a1 = 0
    74: 33 0a 01                 a3 = 0x1
    77: 33 09 01                 a2 = 0x1
    80: 01                       fallthrough
      :                          @7
    81: 7a 1a                    u32 [sp] = a3
    83: 7a 19 04                 u32 [sp + 0x4] = a2
    86: 7a 17 08                 u32 [sp + 0x8] = a0
    89: 7a 18 0c                 u32 [sp + 0xc] = a1
    92: 64 17                    a0 = sp
    94: 33 08 10                 a1 = 0x10
    97: 0a 13                    ecalli 19 // 'export'
    99: 64 17                    a0 = sp
   101: 33 08 10                 a1 = 0x10
   104: 82 10 18                 ra = u64 [sp + 0x18]
   107: 82 15 10                 s0 = u64 [sp + 0x10]
   110: 95 11 20                 sp = sp + 0x20
   113: 32 00                    ret
      :                          @8 [export #1: 'accumulate']
   115: 95 11 b8                 sp = sp + 0xffffffffffffffb8
   118: 7b 10 40                 u64 [sp + 0x40] = ra
   121: 7b 15 38                 u64 [sp + 0x38] = s0
   124: 7b 16 30                 u64 [sp + 0x30] = s1
   127: 33 09 08                 a2 = 0x8
   130: ac 98 e7 00              jump @38 if a1 <u a2
      :                          @9
   134: 33 09 fc                 a2 = 0xfffffffffffffffc
   137: aa 97 9d 01              jump @57 if a0 == a2
      :                          @10
   141: 51 07 99 01              jump @57 if a0 == 0
      :                          @11
   145: 95 8a f8                 a3 = a1 + 0xfffffffffffffff8
   148: 95 75 08                 s0 = a0 + 0x8
   151: 51 0a 45                 jump @21 if a3 == 0
      :                          @12
   154: 7d 58                    a1 = i8 [s0]
   156: 33 06 01                 s1 = 0x1
   159: 59 08 40                 jump @22 if a1 >=s 0
      :                          @13
   162: 84 89 ff 00              a2 = a1 & 0xff
   166: 33 06 02                 s1 = 0x2
   169: 53 29 c0 00 2d           jump @19 if a2 <u 192
      :                          @14
   174: 33 06 03                 s1 = 0x3
   177: 53 29 e0 00 25           jump @19 if a2 <u 224
      :                          @15
   182: 33 06 04                 s1 = 0x4
   185: 53 29 f0 00 1d           jump @19 if a2 <u 240
      :                          @16
   190: 33 06 05                 s1 = 0x5
   193: 53 29 f8 00 15           jump @19 if a2 <u 248
      :                          @17
   198: 33 06 06                 s1 = 0x6
   201: 53 29 fc 00 0d           jump @19 if a2 <u 252
      :                          @18
   206: 88 98 fe 00              a1 = a2 <u 0xfe
   210: 9a 86 08                 s1 = 0x8 - a1
   213: 01                       fallthrough
      :                          @19
   214: ae 6a 09                 jump @22 if a3 >=u s1
      :                          @20
   217: 28 90 00                 jump @38
      :                          @21
   220: 33 06                    s1 = 0
   222: 01                       fallthrough
      :                          @22
   223: 7b 16                    u64 [sp] = s1
   225: 64 57                    a0 = s0
   227: 64 68                    a1 = s1
   229: 64 a6                    s1 = a3
   231: 50 10 02 4c 01           ra = 2, jump @62
      :                          @23 [@dyn 1]
   236: 82 1a                    a3 = u64 [sp]
   238: 51 07 7b                 jump @38 if a0 == 0
      :                          @24
   241: e4 a6 07                 a0 = maxu(s1, a3)
   244: c9 a7 07                 a0 = a0 - a3
   247: 53 17 60 72              jump @38 if a0 <u 96
      :                          @25
   251: c8 5a 08                 a1 = a3 + s0
   254: 95 76 a0                 s1 = a0 + 0xffffffffffffffa0
   257: 95 87 60                 a0 = a1 + 0x60
   260: 7b 17                    u64 [sp] = a0
   262: 51 06 4c                 jump @36 if s1 == 0
      :                          @26
   265: 7d 78                    a1 = i8 [a0]
   267: 33 05 01                 s0 = 0x1
   270: 59 08 37                 jump @33 if a1 >=s 0
      :                          @27
   273: 84 89 ff 00              a2 = a1 & 0xff
   277: 33 05 02                 s0 = 0x2
   280: 53 29 c0 00 2d           jump @33 if a2 <u 192
      :                          @28
   285: 33 05 03                 s0 = 0x3
   288: 53 29 e0 00 25           jump @33 if a2 <u 224
      :                          @29
   293: 33 05 04                 s0 = 0x4
   296: 53 29 f0 00 1d           jump @33 if a2 <u 240
      :                          @30
   301: 33 05 05                 s0 = 0x5
   304: 53 29 f8 00 15           jump @33 if a2 <u 248
      :                          @31
   309: 33 05 06                 s0 = 0x6
   312: 53 29 fc 00 0d           jump @33 if a2 <u 252
      :                          @32
   317: 88 98 fe 00              a1 = a2 <u 0xfe
   321: 9a 85 08                 s0 = 0x8 - a1
   324: 01                       fallthrough
      :                          @33
   325: ac 56 e2 00              jump @58 if s1 <u s0
      :                          @34
   329: 64 58                    a1 = s0
   331: 50 10 04 e8 00           ra = 4, jump @62
      :                          @35 [@dyn 2]
   336: 28 07                    jump @37
      :                          @36
   338: 33 05                    s0 = 0
   340: 33 07                    a0 = 0
   342: 01                       fallthrough
      :                          @37
   343: e4 56 08                 a1 = maxu(s1, s0)
   346: c9 58 08                 a1 = a1 - s0
   349: e4 78 08                 a1 = maxu(a1, a0)
   352: c9 78 08                 a1 = a1 - a0
   355: 33 09 21                 a2 = 0x21
   358: ae 98 19                 jump @40 if a1 >=u a2
      :                          @38
   361: 33 08                    a1 = 0
   363: 33 07 00 00 01           a0 = 0x10000
   368: 01                       fallthrough
      :                          @39
   369: 82 10 40                 ra = u64 [sp + 0x40]
   372: 82 15 38                 s0 = u64 [sp + 0x38]
   375: 82 16 30                 s1 = u64 [sp + 0x30]
   378: 95 11 48                 sp = sp + 0x48
   381: 32 00                    ret
      :                          @40
   383: 82 19                    a2 = u64 [sp]
   385: c8 95 05                 s0 = s0 + a2
   388: c8 57 07                 a0 = a0 + s0
   391: 7c 79 20                 a2 = u8 [a0 + 0x20]
   394: 51 09 1a                 jump @42 if a2 == 0
      :                          @41
   397: 46 11 0f                 u8 [sp + 15] = 0
   400: 95 17 0f                 a0 = sp + 0xf
   403: 33 08 01                 a1 = 0x1
   406: 33 09                    a2 = 0
   408: 33 0a                    a3 = 0
   410: 0a 03                    ecalli 3 // 'write'
   412: 95 17 10                 a0 = sp + 0x10
   415: 33 08 20                 a1 = 0x20
   418: 28 cf                    jump @39
      :                          @42
   420: 95 8a df                 a3 = a1 + 0xffffffffffffffdf
   423: 95 75 21                 s0 = a0 + 0x21
   426: 51 0a 50                 jump @53 if a3 == 0
      :                          @43
   429: 7d 57                    a0 = i8 [s0]
   431: 33 06 01                 s1 = 0x1
   434: 59 07 37                 jump @50 if a0 >=s 0
      :                          @44
   437: 84 77 ff 00              a0 = a0 & 0xff
   441: 33 06 02                 s1 = 0x2
   444: 53 27 c0 00 2d           jump @50 if a0 <u 192
      :                          @45
   449: 33 06 03                 s1 = 0x3
   452: 53 27 e0 00 25           jump @50 if a0 <u 224
      :                          @46
   457: 33 06 04                 s1 = 0x4
   460: 53 27 f0 00 1d           jump @50 if a0 <u 240
      :                          @47
   465: 33 06 05                 s1 = 0x5
   468: 53 27 f8 00 15           jump @50 if a0 <u 248
      :                          @48
   473: 33 06 06                 s1 = 0x6
   476: 53 27 fc 00 0d           jump @50 if a0 <u 252
      :                          @49
   481: 88 77 fe 00              a0 = a0 <u 0xfe
   485: 9a 76 08                 s1 = 0x8 - a0
   488: 01                       fallthrough
      :                          @50
   489: 7b 1a                    u64 [sp] = a3
   491: ac 6a 3e                 jump @60 if a3 <u s1
      :                          @51
   494: 64 57                    a0 = s0
   496: 64 68                    a1 = s1
   498: 50 10 06 41              ra = 6, jump @62
      :                          @52 [@dyn 3]
   502: 82 1a                    a3 = u64 [sp]
   504: 28 07                    jump @54
      :                          @53
   506: 33 06                    s1 = 0
   508: 33 07                    a0 = 0
   510: 01                       fallthrough
      :                          @54
   511: c8 65 09                 a2 = s0 + s1
   514: e4 6a 08                 a1 = maxu(a3, s1)
   517: c9 68 08                 a1 = a1 - s1
   520: e6 78 05                 s0 = minu(a1, a0)
   523: 46 11 0f                 u8 [sp + 15] = 0
   526: 95 17 0f                 a0 = sp + 0xf
   529: 33 08 01                 a1 = 0x1
   532: 64 5a                    a3 = s0
   534: 0a 03                    ecalli 3 // 'write'
   536: 01                       fallthrough
      :                          @55
   537: 55 15 21 0f              jump @59 if s0 >=u 33
      :                          @56
   541: 95 17 10                 a0 = sp + 0x10
   544: 33 08 20                 a1 = 0x20
   547: 28 4e ff                 jump @39
      :                          @57
   550: 00                       trap
      :                          @58
   551: 00                       trap
      :                          @59
   552: 00                       trap
      :                          @60
   553: 00                       trap
      :                          @61 [export #2: 'on_transfer']
   554: 33 07 00 00 01           a0 = 0x10000
   559: 33 08                    a1 = 0
   561: 32 00                    ret
      :                          @62
   563: 51 08 9b 00              jump @83 if a1 == 0
      :                          @63
   567: 64 79                    a2 = a0
   569: 7c 77                    a0 = u8 [a0]
   571: 51 07 91 00              jump @82 if a0 == 0
      :                          @64
   575: 51 27 ff 00 90 00        jump @84 if a0 == 255
      :                          @65
   581: 6c 7a                    a3 = sext.b a0
   583: 57 0a 09                 jump @67 if a3 <s 0
      :                          @66
   586: 33 0a                    a3 = 0
   588: 33 08                    a1 = 0
   590: 28 73                    jump @81
      :                          @67
   592: 55 27 c0 00 0d           jump @69 if a0 >=u 192
      :                          @68
   597: 33 0a 01                 a3 = 0x1
   600: 33 0b 80                 a4 = 0xffffffffffffff80
   603: 28 4a                    jump @78
      :                          @69
   605: 55 27 e0 00 0e           jump @71 if a0 >=u 224
      :                          @70
   610: 33 0a 02                 a3 = 0x2
   613: 33 0b 40 ff              a4 = 0xffffffffffffff40
   617: 28 3c                    jump @78
      :                          @71
   619: 55 27 f0 00 0e           jump @73 if a0 >=u 240
      :                          @72
   624: 33 0a 03                 a3 = 0x3
   627: 33 0b 20 ff              a4 = 0xffffffffffffff20
   631: 28 2e                    jump @78
      :                          @73
   633: 55 27 f8 00 0e           jump @75 if a0 >=u 248
      :                          @74
   638: 33 0a 04                 a3 = 0x4
   641: 33 0b 10 ff              a4 = 0xffffffffffffff10
   645: 28 20                    jump @78
      :                          @75
   647: 55 27 fc 00 0e           jump @77 if a0 >=u 252
      :                          @76
   652: 33 0a 05                 a3 = 0x5
   655: 33 0b 08 ff              a4 = 0xffffffffffffff08
   659: 28 12                    jump @78
      :                          @77
   661: 88 7a fe 00              a3 = a0 <u 0xfe
   665: 33 0b 04 ff              a4 = 0xffffffffffffff04
   669: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
   673: 85 aa 07                 a3 = a3 ^ 0x7
   676: 01                       fallthrough
      :                          @78
   677: ae 8a 2b                 jump @85 if a3 >=u a1
      :                          @79
   680: 33 08                    a1 = 0
   682: c8 b7 07                 a0 = a0 + a4
   685: 64 ab                    a4 = a3
   687: 01                       fallthrough
      :                          @80
   688: c8 b9 0c                 a5 = a2 + a4
   691: 7c cc                    a5 = u8 [a5]
   693: 97 88 08                 a1 = a1 << 0x8
   696: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
   699: d4 c8 08                 a1 = a1 | a5
   702: 52 0b f2                 jump @80 if a4 != 0
      :                          @81
   705: 8a a9 03                 i32 a2 = a3 << 0x3
   708: cf 97 07                 a0 = a0 << a2
   711: c8 87 07                 a0 = a0 + a1
   714: 32 00                    ret
      :                          @82
   716: 32 00                    ret
      :                          @83
   718: 00                       trap
      :                          @84
   719: 00                       trap
      :                          @85
   720: 00                       trap
