// RO data = 0/0 bytes
// RW data = 0/0 bytes
// Stack size = 8192 bytes
// Jump table entry point size = 2 bytes
// RO data = []
// RW data = []
// Instructions = 346
// Code size = 1008 bytes

      :                          @0
     0: 28 ab 00 00 00           jump @27
      :                          @1
     5: 28 0e 01 00 00           jump @32
      :                          @2
    10: 28 30 03                 jump @88
      :                          @3
    13: 51 08 9b 00              jump @24 if a1 == 0
      :                          @4
    17: 64 79                    a2 = a0
    19: 7c 77                    a0 = u8 [a0]
    21: 51 07 91 00              jump @23 if a0 == 0
      :                          @5
    25: 51 27 ff 00 90 00        jump @25 if a0 == 255
      :                          @6
    31: 6c 7a                    a3 = sext.b a0
    33: 57 0a 09                 jump @8 if a3 <s 0
      :                          @7
    36: 33 0a                    a3 = 0
    38: 33 08                    a1 = 0
    40: 28 73                    jump @22
      :                          @8
    42: 55 27 c0 00 0d           jump @10 if a0 >=u 192
      :                          @9
    47: 33 0a 01                 a3 = 0x1
    50: 33 0b 80                 a4 = 0xffffffffffffff80
    53: 28 4a                    jump @19
      :                          @10
    55: 55 27 e0 00 0e           jump @12 if a0 >=u 224
      :                          @11
    60: 33 0a 02                 a3 = 0x2
    63: 33 0b 40 ff              a4 = 0xffffffffffffff40
    67: 28 3c                    jump @19
      :                          @12
    69: 55 27 f0 00 0e           jump @14 if a0 >=u 240
      :                          @13
    74: 33 0a 03                 a3 = 0x3
    77: 33 0b 20 ff              a4 = 0xffffffffffffff20
    81: 28 2e                    jump @19
      :                          @14
    83: 55 27 f8 00 0e           jump @16 if a0 >=u 248
      :                          @15
    88: 33 0a 04                 a3 = 0x4
    91: 33 0b 10 ff              a4 = 0xffffffffffffff10
    95: 28 20                    jump @19
      :                          @16
    97: 55 27 fc 00 0e           jump @18 if a0 >=u 252
      :                          @17
   102: 33 0a 05                 a3 = 0x5
   105: 33 0b 08 ff              a4 = 0xffffffffffffff08
   109: 28 12                    jump @19
      :                          @18
   111: 88 7a fe 00              a3 = a0 <u 0xfe
   115: 33 0b 04 ff              a4 = 0xffffffffffffff04
   119: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
   123: 85 aa 07                 a3 = a3 ^ 0x7
   126: 01                       fallthrough
      :                          @19
   127: ae 8a 2b                 jump @26 if a3 >=u a1
      :                          @20
   130: 33 08                    a1 = 0
   132: c8 b7 07                 a0 = a0 + a4
   135: 64 ab                    a4 = a3
   137: 01                       fallthrough
      :                          @21
   138: c8 b9 0c                 a5 = a2 + a4
   141: 7c cc                    a5 = u8 [a5]
   143: 97 88 08                 a1 = a1 << 0x8
   146: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
   149: d4 c8 08                 a1 = a1 | a5
   152: 52 0b f2                 jump @21 if a4 != 0
      :                          @22
   155: 8a a9 03                 i32 a2 = a3 << 0x3
   158: cf 97 07                 a0 = a0 << a2
   161: c8 87 07                 a0 = a0 + a1
   164: 32 00                    ret
      :                          @23
   166: 32 00                    ret
      :                          @24
   168: 00                       trap
      :                          @25
   169: 00                       trap
      :                          @26
   170: 00                       trap
      :                          @27 [export #0: 'refine']
   171: 95 11 e0                 sp = sp + 0xffffffffffffffe0
   174: 7b 10 18                 u64 [sp + 0x18] = ra
   177: 7b 15 10                 u64 [sp + 0x10] = s0
   180: 49 11 08                 u64 [sp + 8] = 0
   183: 49 01                    u64 [sp + 0] = 0
   185: 64 17                    a0 = sp
   187: 33 09 10                 a2 = 0x10
   190: 33 0a 05                 a3 = 0x5
   193: 33 08                    a1 = 0
   195: 33 0b                    a4 = 0
   197: 33 0c                    a5 = 0
   199: 0a 12                    ecalli 18 // 'fetch'
   201: 01                       fallthrough
      :                          @28
   202: 51 17 ff 1a              jump @30 if a0 == 4294967295
      :                          @29
   206: 81 17 04                 a0 = i32 [sp + 0x4]
   209: 81 18 08                 a1 = i32 [sp + 0x8]
   212: 81 19 0c                 a2 = i32 [sp + 0xc]
   215: 81 1a                    a3 = i32 [sp]
   217: c8 78 0b                 a4 = a1 + a0
   220: be b9 09                 i32 a2 = a2 + a4
   223: 83 aa 01                 i32 a3 = a3 + 0x1
   226: 28 0d                    jump @31
      :                          @30
   228: 33 07                    a0 = 0
   230: 33 08                    a1 = 0
   232: 33 0a 01                 a3 = 0x1
   235: 33 09 01                 a2 = 0x1
   238: 01                       fallthrough
      :                          @31
   239: 7a 1a                    u32 [sp] = a3
   241: 7a 19 04                 u32 [sp + 0x4] = a2
   244: 7a 17 08                 u32 [sp + 0x8] = a0
   247: 7a 18 0c                 u32 [sp + 0xc] = a1
   250: 33 05 10                 s0 = 0x10
   253: 64 17                    a0 = sp
   255: 33 08 10                 a1 = 0x10
   258: 0a 13                    ecalli 19 // 'export'
   260: 64 58                    a1 = s0
   262: 64 17                    a0 = sp
   264: 82 10 18                 ra = u64 [sp + 0x18]
   267: 82 15 10                 s0 = u64 [sp + 0x10]
   270: 95 11 20                 sp = sp + 0x20
   273: 32 00                    ret
      :                          @32 [export #1: 'accumulate']
   275: 95 11 b8                 sp = sp + 0xffffffffffffffb8
   278: 7b 10 40                 u64 [sp + 0x40] = ra
   281: 7b 15 38                 u64 [sp + 0x38] = s0
   284: 7b 16 30                 u64 [sp + 0x30] = s1
   287: 64 85                    s0 = a1
   289: 95 55 f8                 s0 = s0 + 0xfffffffffffffff8
   292: 51 05 0e 02              jump @80 if s0 == 0
      :                          @33
   296: 95 77 08                 a0 = a0 + 0x8
   299: 7d 78                    a1 = i8 [a0]
   301: 33 06 01                 s1 = 0x1
   304: 5a 08 5d                 jump @41 if a1 >s 0
      :                          @34
   307: 84 8a ff 00              a3 = a1 & 0xff
   311: 83 a8 ff                 i32 a1 = a3 + 0xffffffffffffffff
   314: 84 88 ff 00              a1 = a1 & 0xff
   318: 33 06 02                 s1 = 0x2
   321: 53 28 bf 00 4c           jump @41 if a1 <u 191
      :                          @35
   326: 84 a8 e0 00              a1 = a3 & 0xe0
   330: 33 06 03                 s1 = 0x3
   333: 51 28 c0 00 40           jump @41 if a1 == 192
      :                          @36
   338: 84 a8 f0 00              a1 = a3 & 0xf0
   342: 33 06 04                 s1 = 0x4
   345: 51 28 e0 00 34           jump @41 if a1 == 224
      :                          @37
   350: 84 a8 f8 00              a1 = a3 & 0xf8
   354: 33 06 05                 s1 = 0x5
   357: 51 28 f0 00 28           jump @41 if a1 == 240
      :                          @38
   362: 84 a8 fc 00              a1 = a3 & 0xfc
   366: 33 06 06                 s1 = 0x6
   369: 51 28 f8 00 1c           jump @41 if a1 == 248
      :                          @39
   374: 84 a8 fe 00              a1 = a3 & 0xfe
   378: 33 06 07                 s1 = 0x7
   381: 51 28 fc 00 10           jump @41 if a1 == 252
      :                          @40
   386: 88 a8 fe 00              a1 = a3 <u 0xfe
   390: 85 86 01                 s1 = a1 ^ 0x1
   393: 97 66 03                 s1 = s1 << 0x3
   396: 01                       fallthrough
      :                          @41
   397: 7b 15                    u64 [sp] = s0
   399: ac 65 a4 01              jump @81 if s0 <u s1
      :                          @42
   403: 64 75                    s0 = a0
   405: 64 68                    a1 = s1
   407: 50 10 02 76 fe           ra = 2, jump @3
      :                          @43 [@dyn 1]
   412: 51 07 28                 jump @48 if a0 == 0
      :                          @44
   415: 82 19                    a2 = u64 [sp]
   417: aa 69 96 01              jump @85 if a2 == s1
      :                          @45
   421: c8 56 07                 a0 = s1 + s0
   424: 7c 78                    a1 = u8 [a0]
   426: 95 7b 01                 a4 = a0 + 0x1
   429: 85 67 ff                 a0 = s1 ^ 0xffffffffffffffff
   432: c8 79 05                 s0 = a2 + a0
   435: 51 08 18                 jump @49 if a1 == 0
      :                          @46
   438: 33 0a                    a3 = 0
   440: 33 06                    s1 = 0
   442: 95 58 c0                 a1 = s0 + 0xffffffffffffffc0
   445: 52 08 9f 00              jump @63 if a1 != 0
      :                          @47
   449: 28 1a 01                 jump @74
      :                          @48
   452: 33 0a                    a3 = 0
   454: 33 06                    s1 = 0
   456: 28 13 01                 jump @74
      :                          @49
   459: 51 05 79                 jump @61 if s0 == 0
      :                          @50
   462: 7d b7                    a0 = i8 [a4]
   464: 33 06 01                 s1 = 0x1
   467: 5a 07 5a                 jump @58 if a0 >s 0
      :                          @51
   470: 84 77 ff 00              a0 = a0 & 0xff
   474: 83 78 ff                 i32 a1 = a0 + 0xffffffffffffffff
   477: 84 8a ff 00              a3 = a1 & 0xff
   481: 33 06 02                 s1 = 0x2
   484: 53 2a bf 00 49           jump @58 if a3 <u 191
      :                          @52
   489: 84 7a e0 00              a3 = a0 & 0xe0
   493: 33 06 03                 s1 = 0x3
   496: 51 2a c0 00 3d           jump @58 if a3 == 192
      :                          @53
   501: 84 7a f0 00              a3 = a0 & 0xf0
   505: 33 06 04                 s1 = 0x4
   508: 51 2a e0 00 31           jump @58 if a3 == 224
      :                          @54
   513: 84 7a f8 00              a3 = a0 & 0xf8
   517: 33 06 05                 s1 = 0x5
   520: 51 2a f0 00 25           jump @58 if a3 == 240
      :                          @55
   525: 84 7a fc 00              a3 = a0 & 0xfc
   529: 33 06 06                 s1 = 0x6
   532: 51 2a f8 00 19           jump @58 if a3 == 248
      :                          @56
   537: 84 7a fe 00              a3 = a0 & 0xfe
   541: 33 06 07                 s1 = 0x7
   544: 51 2a fc 00 0d           jump @58 if a3 == 252
      :                          @57
   549: 33 06 08                 s1 = 0x8
   552: 53 27 fe 00 1c           jump @61 if a0 <u 254
      :                          @58
   557: ac 65 0b 01              jump @86 if s0 <u s1
      :                          @59
   561: 64 b7                    a0 = a4
   563: 64 68                    a1 = s1
   565: 7b 1b                    u64 [sp] = a4
   567: 50 10 04 d6 fd           ra = 4, jump @3
      :                          @60 [@dyn 2]
   572: 64 68                    a1 = s1
   574: 82 1b                    a4 = u64 [sp]
   576: 64 7a                    a3 = a0
   578: 28 07                    jump @62
      :                          @61
   580: 33 08                    a1 = 0
   582: 33 0a                    a3 = 0
   584: 01                       fallthrough
      :                          @62
   585: c8 8b 06                 s1 = a4 + a1
   588: c8 a6 0b                 a4 = s1 + a3
   591: c8 8a 07                 a0 = a3 + a1
   594: c9 75 05                 s0 = s0 - a0
   597: 95 58 c0                 a1 = s0 + 0xffffffffffffffc0
   600: 51 08 83 00              jump @74 if a1 == 0
      :                          @63
   604: 95 b7 40                 a0 = a4 + 0x40
   607: 7d 7b                    a4 = i8 [a0]
   609: 33 09 01                 a2 = 0x1
   612: 5a 0b 6b                 jump @72 if a4 >s 0
      :                          @64
   615: 84 b5 ff 00              s0 = a4 & 0xff
   619: 83 59 ff                 i32 a2 = s0 + 0xffffffffffffffff
   622: 84 9b ff 00              a4 = a2 & 0xff
   626: 33 0c bf 00              a5 = 0xbf
   630: 33 09 02                 a2 = 0x2
   633: ac cb 53                 jump @71 if a4 <u a5
      :                          @65
   636: 84 5b e0 00              a4 = s0 & 0xe0
   640: 33 0c c0 00              a5 = 0xc0
   644: 33 09 03                 a2 = 0x3
   647: aa cb 45                 jump @71 if a4 == a5
      :                          @66
   650: 84 5b f0 00              a4 = s0 & 0xf0
   654: 33 0c e0 00              a5 = 0xe0
   658: 33 09 04                 a2 = 0x4
   661: aa cb 37                 jump @71 if a4 == a5
      :                          @67
   664: 84 5b f8 00              a4 = s0 & 0xf8
   668: 33 0c f0 00              a5 = 0xf0
   672: 33 09 05                 a2 = 0x5
   675: aa cb 29                 jump @71 if a4 == a5
      :                          @68
   678: 84 5b fc 00              a4 = s0 & 0xfc
   682: 33 0c f8 00              a5 = 0xf8
   686: 33 09 06                 a2 = 0x6
   689: aa cb 1b                 jump @71 if a4 == a5
      :                          @69
   692: 84 5b fe 00              a4 = s0 & 0xfe
   696: 33 0c fc 00              a5 = 0xfc
   700: 33 09 07                 a2 = 0x7
   703: aa cb 0d                 jump @71 if a4 == a5
      :                          @70
   706: 33 0b fe 00              a4 = 0xfe
   710: 33 09 08                 a2 = 0x8
   713: ac b5 12                 jump @74 if s0 <u a4
      :                          @71
   716: ac 98 6d                 jump @87 if a1 <u a2
      :                          @72
   719: 64 98                    a1 = a2
   721: 64 a5                    s0 = a3
   723: 50 10 06 3a fd           ra = 6, jump @3
      :                          @73 [@dyn 3]
   728: 64 5a                    a3 = s0
   730: 01                       fallthrough
      :                          @74
   731: 46 11 0f                 u8 [sp + 15] = 0
   734: 81 67                    a0 = i32 [s1]
   736: 7b 17                    u64 [sp] = a0
   738: 95 17 0f                 a0 = sp + 0xf
   741: 33 08 01                 a1 = 0x1
   744: 64 69                    a2 = s1
   746: 64 65                    s0 = s1
   748: 64 a6                    s1 = a3
   750: 0a 03                    ecalli 3 // 'write'
   752: 01                       fallthrough
      :                          @75
   753: 49 11 28                 u64 [sp + 40] = 0
   756: 49 11 20                 u64 [sp + 32] = 0
   759: 49 11 18                 u64 [sp + 24] = 0
   762: 49 11 10                 u64 [sp + 16] = 0
   765: 55 16 21 37              jump @82 if s1 >=u 33
      :                          @76
   769: ab 56 34                 jump @83 if s1 != s0
      :                          @77
   772: 95 17 10                 a0 = sp + 0x10
   775: 64 58                    a1 = s0
   777: 64 69                    a2 = s1
   779: 50 10 08 33              ra = 8, jump @89
      :                          @78 [@dyn 4]
   783: 82 18                    a1 = u64 [sp]
   785: 87 87 ab aa aa aa        i32 a0 = a1 * 0xffffffffaaaaaaab
   791: 53 47 56 55 55 55 1f     jump @84 if a0 <u 1431655766
      :                          @79
   798: 33 08 20                 a1 = 0x20
   801: 95 17 10                 a0 = sp + 0x10
   804: 82 10 40                 ra = u64 [sp + 0x40]
   807: 82 15 38                 s0 = u64 [sp + 0x38]
   810: 82 16 30                 s1 = u64 [sp + 0x30]
   813: 95 11 48                 sp = sp + 0x48
   816: 32 00                    ret
      :                          @80
   818: 00                       trap
      :                          @81
   819: 00                       trap
      :                          @82
   820: 00                       trap
      :                          @83
   821: 00                       trap
      :                          @84
   822: 00                       trap
      :                          @85
   823: 00                       trap
      :                          @86
   824: 00                       trap
      :                          @87
   825: 00                       trap
      :                          @88 [export #2: 'on_transfer']
   826: 33 07                    a0 = 0
   828: 32 00                    ret
      :                          @89
   830: 95 11 e0                 sp = sp + 0xffffffffffffffe0
   833: 7b 10 18                 u64 [sp + 0x18] = ra
   836: 7b 15 10                 u64 [sp + 0x10] = s0
   839: 7b 16 08                 u64 [sp + 0x8] = s1
   842: 53 19 10 64              jump @98 if a2 <u 16
      :                          @90
   846: 8d 7a                    i32 a3 = -a0
   848: 84 a2 07                 t0 = a3 & 0x7
   851: c8 27 0b                 a4 = a0 + t0
   854: 51 02 15                 jump @93 if t0 == 0
      :                          @91
   857: 64 8c                    a5 = a1
   859: 64 75                    s0 = a0
   861: 01                       fallthrough
      :                          @92
   862: 7c ca                    a3 = u8 [a5]
   864: 78 5a                    u8 [s0] = a3
   866: 95 55 01                 s0 = s0 + 0x1
   869: 95 cc 01                 a5 = a5 + 0x1
   872: ac b5 f6                 jump @92 if s0 <u a4
      :                          @93
   875: c8 28 03                 t1 = a1 + t0
   878: c9 29 02                 t0 = a2 - t0
   881: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
   884: 84 38 07                 a1 = t1 & 0x7
   887: c8 4b 0a                 a3 = a4 + t2
   890: 51 08 3b                 jump @100 if a1 == 0
      :                          @94
   893: 58 04 4b                 jump @103 if t2 <=s 0
      :                          @95
   896: 97 38 03                 a1 = t1 << 0x3
   899: 84 80 38                 ra = a1 & 0x38
   902: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
   905: 82 c5                    s0 = u64 [a5]
   907: 8d 88                    i32 a1 = -a1
   909: 84 88 38                 a1 = a1 & 0x38
   912: 95 cc 08                 a5 = a5 + 0x8
   915: 01                       fallthrough
      :                          @96
   916: 82 c6                    s1 = u64 [a5]
   918: d0 05 05                 s0 = s0 >> ra
   921: cf 86 09                 a2 = s1 << a1
   924: d4 59 09                 a2 = a2 | s0
   927: 7b b9                    u64 [a4] = a2
   929: 95 bb 08                 a4 = a4 + 0x8
   932: 95 cc 08                 a5 = a5 + 0x8
   935: 64 65                    s0 = s1
   937: ac ab eb                 jump @96 if a4 <u a3
      :                          @97
   940: 28 1c                    jump @103
      :                          @98
   942: 64 7a                    a3 = a0
   944: 52 09 21                 jump @104 if a2 != 0
      :                          @99
   947: 28 2f                    jump @106
      :                          @100
   949: 58 04 13                 jump @103 if t2 <=s 0
      :                          @101
   952: 64 38                    a1 = t1
   954: 01                       fallthrough
      :                          @102
   955: 82 89                    a2 = u64 [a1]
   957: 7b b9                    u64 [a4] = a2
   959: 95 bb 08                 a4 = a4 + 0x8
   962: 95 88 08                 a1 = a1 + 0x8
   965: ac ab f6                 jump @102 if a4 <u a3
      :                          @103
   968: c8 43 08                 a1 = t1 + t2
   971: 84 29 07                 a2 = t0 & 0x7
   974: 51 09 14                 jump @106 if a2 == 0
      :                          @104
   977: c8 a9 09                 a2 = a2 + a3
   980: 01                       fallthrough
      :                          @105
   981: 7c 8b                    a4 = u8 [a1]
   983: 78 ab                    u8 [a3] = a4
   985: 95 aa 01                 a3 = a3 + 0x1
   988: 95 88 01                 a1 = a1 + 0x1
   991: ac 9a f6                 jump @105 if a3 <u a2
      :                          @106
   994: 82 10 18                 ra = u64 [sp + 0x18]
   997: 82 15 10                 s0 = u64 [sp + 0x10]
  1000: 82 16 08                 s1 = u64 [sp + 0x8]
  1003: 95 11 20                 sp = sp + 0x20
  1006: 32 00                    ret
