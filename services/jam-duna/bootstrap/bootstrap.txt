// RO data = 0/0 bytes
// RW data = 0/0 bytes
// Stack size = 8192 bytes
// Jump table entry point size = 1 bytes
// RO data = []
// RW data = []
// Instructions = 67
// Code size = 197 bytes

      :                          @0
     0: 28 0c 00 00 00           jump @3
      :                          @1
     5: 28 0f 00 00 00           jump @4
      :                          @2
    10: 28 65                    jump @6
      :                          @3 [export #0: 'refine']
    12: 33 08 24                 a1 = 0x24
    15: 95 77 04                 a0 = a0 + 0x4
    18: 32 00                    ret
      :                          @4 [export #1: 'accumulate']
    20: 95 11 60 ff              sp = sp + 0xffffffffffffff60
    24: 7b 10 98 00              u64 [sp + 0x98] = ra
    28: 7b 15 90 00              u64 [sp + 0x90] = s0
    32: c8 78 08                 a1 = a1 + a0
    35: 80 88 fc                 a1 = u32 [a1 + 0xfffffffffffffffc]
    38: 33 09 64                 a2 = 0x64
    41: 33 0a 64                 a3 = 0x64
    44: 0a 09                    ecalli 9 // 'new'
    46: 64 75                    s0 = a0
    48: 7b 17                    u64 [sp] = a0
    50: 48 11 0c                 u32 [sp + 12] = 0
    53: 95 17 0c                 a0 = sp + 0xc
    56: 33 08 04                 a1 = 0x4
    59: 64 19                    a2 = sp
    61: 33 0a 04                 a3 = 0x4
    64: 0a 03                    ecalli 3 // 'write'
    66: 95 17 10                 a0 = sp + 0x10
    69: 33 09 80 00              a2 = 0x80
    73: 33 08                    a1 = 0
    75: 50 10 02 28              ra = 2, jump @7
      :                          @5 [@dyn 1]
    79: 33 08 7f 96 98 00        a1 = 0x98967f
    85: 33 09 64                 a2 = 0x64
    88: 95 1a 10                 a3 = sp + 0x10
    91: 64 57                    a0 = s0
    93: 0a 0b                    ecalli 11 // 'transfer'
    95: 33 07                    a0 = 0
    97: 82 10 98 00              ra = u64 [sp + 0x98]
   101: 82 15 90 00              s0 = u64 [sp + 0x90]
   105: 95 11 a0 00              sp = sp + 0xa0
   109: 32 00                    ret
      :                          @6 [export #2: 'on_transfer']
   111: 33 07                    a0 = 0
   113: 32 00                    ret
      :                          @7
   115: 8d 7a                    i32 a3 = -a0
   117: 84 aa 07                 a3 = a3 & 0x7
   120: c8 a7 0b                 a4 = a0 + a3
   123: 51 0a 0e                 jump @10 if a3 == 0
      :                          @8
   126: 64 7c                    a5 = a0
   128: 01                       fallthrough
      :                          @9
   129: 78 c8                    u8 [a5] = a1
   131: 95 cc 01                 a5 = a5 + 0x1
   134: ac bc fb                 jump @9 if a5 <u a4
      :                          @10
   137: c9 a9 03                 t1 = a2 - a3
   140: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
   143: c8 cb 0a                 a3 = a4 + a5
   146: 58 0c 1d                 jump @13 if a5 <=s 0
      :                          @11
   149: 84 82 ff 00              t0 = a1 & 0xff
   153: 14 09 01 01 01 01 01 01 01 01 a2 = 0x101010101010101
   163: ca 92 0c                 a5 = t0 * a2
   166: 01                       fallthrough
      :                          @12
   167: 7b bc                    u64 [a4] = a5
   169: 95 bb 08                 a4 = a4 + 0x8
   172: ac ab fb                 jump @12 if a4 <u a3
      :                          @13
   175: 84 39 07                 a2 = t1 & 0x7
   178: 52 09 05                 jump @15 if a2 != 0
      :                          @14
   181: 28 0e                    jump @17
      :                          @15
   183: c8 a9 09                 a2 = a2 + a3
   186: 01                       fallthrough
      :                          @16
   187: 78 a8                    u8 [a3] = a1
   189: 95 aa 01                 a3 = a3 + 0x1
   192: ac 9a fb                 jump @16 if a3 <u a2
      :                          @17
   195: 32 00                    ret
