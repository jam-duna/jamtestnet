// RO data = 0/0 bytes
// RW data = 0/0 bytes
// Stack size = 8192 bytes
// Jump table entry point size = 2 bytes
// RO data = []
// RW data = []
// Instructions = 328
// Code size = 973 bytes

      :                          @0
     0: 28 0d 00 00 00           jump @3
      :                          @1
     5: 28 ae 00 00 00           jump @18
      :                          @2
    10: 28 ca 02                 jump @70
      :                          @3 [export #0: 'refine']
    13: 95 11 e0                 sp = sp + 0xffffffffffffffe0
    16: 7b 10 18                 u64 [sp + 0x18] = ra
    19: 7b 15 10                 u64 [sp + 0x10] = s0
    22: 7b 16 08                 u64 [sp + 0x8] = s1
    25: 64 86                    s1 = a1
    27: 64 78                    a1 = a0
    29: 33 09 04                 a2 = 0x4
    32: 33 07 00 00 01           a0 = 0x10000
    37: ac 96 7c                 jump @15 if s1 <u a2
      :                          @4
    40: 95 66 fc                 s1 = s1 + 0xfffffffffffffffc
    43: 51 06 76                 jump @15 if s1 == 0
      :                          @5
    46: 95 87 04                 a0 = a1 + 0x4
    49: 7d 78                    a1 = i8 [a0]
    51: 33 05 01                 s0 = 0x1
    54: 59 08 3a                 jump @13 if a1 >=s 0
      :                          @6
    57: 84 89 ff 00              a2 = a1 & 0xff
    61: 33 05 02                 s0 = 0x2
    64: 53 29 c0 00 2d           jump @12 if a2 <u 192
      :                          @7
    69: 33 05 03                 s0 = 0x3
    72: 53 29 e0 00 25           jump @12 if a2 <u 224
      :                          @8
    77: 33 05 04                 s0 = 0x4
    80: 53 29 f0 00 1d           jump @12 if a2 <u 240
      :                          @9
    85: 33 05 05                 s0 = 0x5
    88: 53 29 f8 00 15           jump @12 if a2 <u 248
      :                          @10
    93: 33 05 06                 s0 = 0x6
    96: 53 29 fc 00 0d           jump @12 if a2 <u 252
      :                          @11
   101: 88 98 fe 00              a1 = a2 <u 0xfe
   105: 9a 85 08                 s0 = 0x8 - a1
   108: 01                       fallthrough
      :                          @12
   109: ac 56 45                 jump @17 if s1 <u s0
      :                          @13
   112: 64 58                    a1 = s0
   114: 7b 17                    u64 [sp] = a0
   116: 50 10 02 bb 02           ra = 2, jump @82
      :                          @14 [@dyn 1]
   121: 64 78                    a1 = a0
   123: e4 56 07                 a0 = maxu(s1, s0)
   126: c9 57 07                 a0 = a0 - s0
   129: d8 87 09                 a2 = a0 <u a1
   132: e4 87 07                 a0 = maxu(a0, a1)
   135: c9 87 07                 a0 = a0 - a1
   138: 88 77 20                 a0 = a0 <u 0x20
   141: d4 79 09                 a2 = a2 | a0
   144: 82 17                    a0 = u64 [sp]
   146: c8 75 05                 s0 = s0 + a0
   149: 94 98                    a1 = 0 if a2 != 0
   151: 33 07 00 00 01           a0 = 0x10000
   156: da 95 07                 a0 = s0 if a2 == 0
   159: 28 05                    jump @16
      :                          @15
   161: 33 08                    a1 = 0
   163: 01                       fallthrough
      :                          @16
   164: 82 10 18                 ra = u64 [sp + 0x18]
   167: 82 15 10                 s0 = u64 [sp + 0x10]
   170: 82 16 08                 s1 = u64 [sp + 0x8]
   173: 95 11 20                 sp = sp + 0x20
   176: 32 00                    ret
      :                          @17
   178: 00                       trap
      :                          @18 [export #1: 'accumulate']
   179: 95 11 90                 sp = sp + 0xffffffffffffff90
   182: 7b 10 68                 u64 [sp + 0x68] = ra
   185: 7b 15 60                 u64 [sp + 0x60] = s0
   188: 7b 16 58                 u64 [sp + 0x58] = s1
   191: 33 09 08                 a2 = 0x8
   194: ac 98 e7 00              jump @48 if a1 <u a2
      :                          @19
   198: 33 09 fc                 a2 = 0xfffffffffffffffc
   201: aa 97 08 02              jump @67 if a0 == a2
      :                          @20
   205: 51 07 04 02              jump @67 if a0 == 0
      :                          @21
   209: 95 8a f8                 a3 = a1 + 0xfffffffffffffff8
   212: 95 75 08                 s0 = a0 + 0x8
   215: 51 0a 45                 jump @31 if a3 == 0
      :                          @22
   218: 7d 58                    a1 = i8 [s0]
   220: 33 06 01                 s1 = 0x1
   223: 59 08 40                 jump @32 if a1 >=s 0
      :                          @23
   226: 84 89 ff 00              a2 = a1 & 0xff
   230: 33 06 02                 s1 = 0x2
   233: 53 29 c0 00 2d           jump @29 if a2 <u 192
      :                          @24
   238: 33 06 03                 s1 = 0x3
   241: 53 29 e0 00 25           jump @29 if a2 <u 224
      :                          @25
   246: 33 06 04                 s1 = 0x4
   249: 53 29 f0 00 1d           jump @29 if a2 <u 240
      :                          @26
   254: 33 06 05                 s1 = 0x5
   257: 53 29 f8 00 15           jump @29 if a2 <u 248
      :                          @27
   262: 33 06 06                 s1 = 0x6
   265: 53 29 fc 00 0d           jump @29 if a2 <u 252
      :                          @28
   270: 88 98 fe 00              a1 = a2 <u 0xfe
   274: 9a 86 08                 s1 = 0x8 - a1
   277: 01                       fallthrough
      :                          @29
   278: ae 6a 09                 jump @32 if a3 >=u s1
      :                          @30
   281: 28 90 00                 jump @48
      :                          @31
   284: 33 06                    s1 = 0
   286: 01                       fallthrough
      :                          @32
   287: 7b 16                    u64 [sp] = s1
   289: 64 57                    a0 = s0
   291: 64 68                    a1 = s1
   293: 64 a6                    s1 = a3
   295: 50 10 04 08 02           ra = 4, jump @82
      :                          @33 [@dyn 2]
   300: 82 1a                    a3 = u64 [sp]
   302: 51 07 7b                 jump @48 if a0 == 0
      :                          @34
   305: e4 a6 07                 a0 = maxu(s1, a3)
   308: c9 a7 07                 a0 = a0 - a3
   311: 53 17 60 72              jump @48 if a0 <u 96
      :                          @35
   315: c8 5a 08                 a1 = a3 + s0
   318: 95 76 a0                 s1 = a0 + 0xffffffffffffffa0
   321: 95 87 60                 a0 = a1 + 0x60
   324: 7b 17                    u64 [sp] = a0
   326: 51 06 4c                 jump @46 if s1 == 0
      :                          @36
   329: 7d 78                    a1 = i8 [a0]
   331: 33 05 01                 s0 = 0x1
   334: 59 08 37                 jump @43 if a1 >=s 0
      :                          @37
   337: 84 89 ff 00              a2 = a1 & 0xff
   341: 33 05 02                 s0 = 0x2
   344: 53 29 c0 00 2d           jump @43 if a2 <u 192
      :                          @38
   349: 33 05 03                 s0 = 0x3
   352: 53 29 e0 00 25           jump @43 if a2 <u 224
      :                          @39
   357: 33 05 04                 s0 = 0x4
   360: 53 29 f0 00 1d           jump @43 if a2 <u 240
      :                          @40
   365: 33 05 05                 s0 = 0x5
   368: 53 29 f8 00 15           jump @43 if a2 <u 248
      :                          @41
   373: 33 05 06                 s0 = 0x6
   376: 53 29 fc 00 0d           jump @43 if a2 <u 252
      :                          @42
   381: 88 98 fe 00              a1 = a2 <u 0xfe
   385: 9a 85 08                 s0 = 0x8 - a1
   388: 01                       fallthrough
      :                          @43
   389: ac 56 4d 01              jump @68 if s1 <u s0
      :                          @44
   393: 64 58                    a1 = s0
   395: 50 10 06 a4 01           ra = 6, jump @82
      :                          @45 [@dyn 3]
   400: 28 07                    jump @47
      :                          @46
   402: 33 05                    s0 = 0
   404: 33 07                    a0 = 0
   406: 01                       fallthrough
      :                          @47
   407: e4 56 08                 a1 = maxu(s1, s0)
   410: c9 58 08                 a1 = a1 - s0
   413: e4 78 08                 a1 = maxu(a1, a0)
   416: c9 78 08                 a1 = a1 - a0
   419: 33 09 21                 a2 = 0x21
   422: ae 98 19                 jump @50 if a1 >=u a2
      :                          @48
   425: 33 08                    a1 = 0
   427: 33 07 00 00 01           a0 = 0x10000
   432: 01                       fallthrough
      :                          @49
   433: 82 10 68                 ra = u64 [sp + 0x68]
   436: 82 15 60                 s0 = u64 [sp + 0x60]
   439: 82 16 58                 s1 = u64 [sp + 0x58]
   442: 95 11 70                 sp = sp + 0x70
   445: 32 00                    ret
      :                          @50
   447: 82 19                    a2 = u64 [sp]
   449: c8 95 05                 s0 = s0 + a2
   452: c8 57 07                 a0 = a0 + s0
   455: 7c 79 20                 a2 = u8 [a0 + 0x20]
   458: 51 09 09                 jump @52 if a2 == 0
      :                          @51
   461: 33 07                    a0 = 0
   463: 33 08                    a1 = 0
   465: 28 6c                    jump @65
      :                          @52
   467: 95 8a df                 a3 = a1 + 0xffffffffffffffdf
   470: 95 75 21                 s0 = a0 + 0x21
   473: 51 0a 52                 jump @63 if a3 == 0
      :                          @53
   476: 7d 57                    a0 = i8 [s0]
   478: 33 06 01                 s1 = 0x1
   481: 59 07 37                 jump @60 if a0 >=s 0
      :                          @54
   484: 84 77 ff 00              a0 = a0 & 0xff
   488: 33 06 02                 s1 = 0x2
   491: 53 27 c0 00 2d           jump @60 if a0 <u 192
      :                          @55
   496: 33 06 03                 s1 = 0x3
   499: 53 27 e0 00 25           jump @60 if a0 <u 224
      :                          @56
   504: 33 06 04                 s1 = 0x4
   507: 53 27 f0 00 1d           jump @60 if a0 <u 240
      :                          @57
   512: 33 06 05                 s1 = 0x5
   515: 53 27 f8 00 15           jump @60 if a0 <u 248
      :                          @58
   520: 33 06 06                 s1 = 0x6
   523: 53 27 fc 00 0d           jump @60 if a0 <u 252
      :                          @59
   528: 88 77 fe 00              a0 = a0 <u 0xfe
   532: 9a 76 08                 s1 = 0x8 - a0
   535: 01                       fallthrough
      :                          @60
   536: 7b 1a                    u64 [sp] = a3
   538: ac 6a b9 00              jump @69 if a3 <u s1
      :                          @61
   542: 64 57                    a0 = s0
   544: 64 68                    a1 = s1
   546: 50 10 08 0d 01           ra = 8, jump @82
      :                          @62 [@dyn 4]
   551: 82 1a                    a3 = u64 [sp]
   553: 28 07                    jump @64
      :                          @63
   555: 33 06                    s1 = 0
   557: 33 07                    a0 = 0
   559: 01                       fallthrough
      :                          @64
   560: c8 65 08                 a1 = s0 + s1
   563: e4 6a 09                 a2 = maxu(a3, s1)
   566: c9 69 09                 a2 = a2 - s1
   569: e6 79 07                 a0 = minu(a2, a0)
   572: 01                       fallthrough
      :                          @65
   573: c8 78 09                 a2 = a1 + a0
   576: 48 11 10                 u32 [sp + 16] = 0
   579: 49 11 08                 u64 [sp + 8] = 0
   582: 48 11 20                 u32 [sp + 32] = 0
   585: 49 11 18                 u64 [sp + 24] = 0
   588: 46 11 2b                 u8 [sp + 43] = 0
   591: 80 87                    a0 = u32 [a1]
   593: 80 95 fc                 s0 = u32 [a2 + 0xfffffffffffffffc]
   596: 95 18 2b                 a1 = sp + 0x2b
   599: 33 09 01                 a2 = 0x1
   602: 95 1a 08                 a3 = sp + 0x8
   605: 33 0c 0c                 a5 = 0xc
   608: 33 0b                    a4 = 0
   610: 0a 02                    ecalli 2 // 'read'
   612: 95 18 2b                 a1 = sp + 0x2b
   615: 33 09 01                 a2 = 0x1
   618: 95 1a 18                 a3 = sp + 0x18
   621: 33 0c 0c                 a5 = 0xc
   624: 64 57                    a0 = s0
   626: 33 0b                    a4 = 0
   628: 0a 02                    ecalli 2 // 'read'
   630: 81 17 0c                 a0 = i32 [sp + 0xc]
   633: 81 18 10                 a1 = i32 [sp + 0x10]
   636: 81 19 1c                 a2 = i32 [sp + 0x1c]
   639: 81 1a 20                 a3 = i32 [sp + 0x20]
   642: 81 1b 08                 a4 = i32 [sp + 0x8]
   645: be 97 07                 i32 a0 = a0 + a2
   648: be a8 08                 i32 a1 = a1 + a3
   651: 7a 1b 2c                 u32 [sp + 0x2c] = a4
   654: 7a 17 30                 u32 [sp + 0x30] = a0
   657: 7a 18 34                 u32 [sp + 0x34] = a1
   660: 95 17 2b                 a0 = sp + 0x2b
   663: 33 08 01                 a1 = 0x1
   666: 95 19 2c                 a2 = sp + 0x2c
   669: 33 0a 0c                 a3 = 0xc
   672: 0a 03                    ecalli 3 // 'write'
   674: 95 17 44                 a0 = sp + 0x44
   677: 33 09 14                 a2 = 0x14
   680: 33 08                    a1 = 0
   682: 50 10 0a 33              ra = 10, jump @71
      :                          @66 [@dyn 5]
   686: 81 17 34                 a0 = i32 [sp + 0x34]
   689: 80 18 30                 a1 = u32 [sp + 0x30]
   692: 80 19 2c                 a2 = u32 [sp + 0x2c]
   695: 7a 17 40                 u32 [sp + 0x40] = a0
   698: 97 88 20                 a1 = a1 << 0x20
   701: d4 98 08                 a1 = a1 | a2
   704: 7b 18 38                 u64 [sp + 0x38] = a1
   707: 95 17 38                 a0 = sp + 0x38
   710: 0a 10                    ecalli 16 // 'oyield'
   712: 95 17 38                 a0 = sp + 0x38
   715: 33 08 20                 a1 = 0x20
   718: 28 e3 fe                 jump @49
      :                          @67
   721: 00                       trap
      :                          @68
   722: 00                       trap
      :                          @69
   723: 00                       trap
      :                          @70 [export #2: 'on_transfer']
   724: 33 07 00 00 01           a0 = 0x10000
   729: 33 08                    a1 = 0
   731: 32 00                    ret
      :                          @71
   733: 8d 7a                    i32 a3 = -a0
   735: 84 aa 07                 a3 = a3 & 0x7
   738: c8 a7 0b                 a4 = a0 + a3
   741: 51 0a 0e                 jump @74 if a3 == 0
      :                          @72
   744: 64 7c                    a5 = a0
   746: 01                       fallthrough
      :                          @73
   747: 78 c8                    u8 [a5] = a1
   749: 95 cc 01                 a5 = a5 + 0x1
   752: ac bc fb                 jump @73 if a5 <u a4
      :                          @74
   755: c9 a9 03                 t1 = a2 - a3
   758: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
   761: c8 cb 0a                 a3 = a4 + a5
   764: 58 0c 1d                 jump @77 if a5 <=s 0
      :                          @75
   767: 84 82 ff 00              t0 = a1 & 0xff
   771: 14 09 01 01 01 01 01 01 01 01 a2 = 0x101010101010101
   781: ca 92 0c                 a5 = t0 * a2
   784: 01                       fallthrough
      :                          @76
   785: 7b bc                    u64 [a4] = a5
   787: 95 bb 08                 a4 = a4 + 0x8
   790: ac ab fb                 jump @76 if a4 <u a3
      :                          @77
   793: 84 39 07                 a2 = t1 & 0x7
   796: 52 09 05                 jump @79 if a2 != 0
      :                          @78
   799: 28 0e                    jump @81
      :                          @79
   801: c8 a9 09                 a2 = a2 + a3
   804: 01                       fallthrough
      :                          @80
   805: 78 a8                    u8 [a3] = a1
   807: 95 aa 01                 a3 = a3 + 0x1
   810: ac 9a fb                 jump @80 if a3 <u a2
      :                          @81
   813: 32 00                    ret
      :                          @82
   815: 51 08 9b 00              jump @103 if a1 == 0
      :                          @83
   819: 64 79                    a2 = a0
   821: 7c 77                    a0 = u8 [a0]
   823: 51 07 91 00              jump @102 if a0 == 0
      :                          @84
   827: 51 27 ff 00 90 00        jump @104 if a0 == 255
      :                          @85
   833: 6c 7a                    a3 = sext.b a0
   835: 57 0a 09                 jump @87 if a3 <s 0
      :                          @86
   838: 33 0a                    a3 = 0
   840: 33 08                    a1 = 0
   842: 28 73                    jump @101
      :                          @87
   844: 55 27 c0 00 0d           jump @89 if a0 >=u 192
      :                          @88
   849: 33 0a 01                 a3 = 0x1
   852: 33 0b 80                 a4 = 0xffffffffffffff80
   855: 28 4a                    jump @98
      :                          @89
   857: 55 27 e0 00 0e           jump @91 if a0 >=u 224
      :                          @90
   862: 33 0a 02                 a3 = 0x2
   865: 33 0b 40 ff              a4 = 0xffffffffffffff40
   869: 28 3c                    jump @98
      :                          @91
   871: 55 27 f0 00 0e           jump @93 if a0 >=u 240
      :                          @92
   876: 33 0a 03                 a3 = 0x3
   879: 33 0b 20 ff              a4 = 0xffffffffffffff20
   883: 28 2e                    jump @98
      :                          @93
   885: 55 27 f8 00 0e           jump @95 if a0 >=u 248
      :                          @94
   890: 33 0a 04                 a3 = 0x4
   893: 33 0b 10 ff              a4 = 0xffffffffffffff10
   897: 28 20                    jump @98
      :                          @95
   899: 55 27 fc 00 0e           jump @97 if a0 >=u 252
      :                          @96
   904: 33 0a 05                 a3 = 0x5
   907: 33 0b 08 ff              a4 = 0xffffffffffffff08
   911: 28 12                    jump @98
      :                          @97
   913: 88 7a fe 00              a3 = a0 <u 0xfe
   917: 33 0b 04 ff              a4 = 0xffffffffffffff04
   921: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
   925: 85 aa 07                 a3 = a3 ^ 0x7
   928: 01                       fallthrough
      :                          @98
   929: ae 8a 2b                 jump @105 if a3 >=u a1
      :                          @99
   932: 33 08                    a1 = 0
   934: c8 b7 07                 a0 = a0 + a4
   937: 64 ab                    a4 = a3
   939: 01                       fallthrough
      :                          @100
   940: c8 b9 0c                 a5 = a2 + a4
   943: 7c cc                    a5 = u8 [a5]
   945: 97 88 08                 a1 = a1 << 0x8
   948: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
   951: d4 c8 08                 a1 = a1 | a5
   954: 52 0b f2                 jump @100 if a4 != 0
      :                          @101
   957: 8a a9 03                 i32 a2 = a3 << 0x3
   960: cf 97 07                 a0 = a0 << a2
   963: c8 87 07                 a0 = a0 + a1
   966: 32 00                    ret
      :                          @102
   968: 32 00                    ret
      :                          @103
   970: 00                       trap
      :                          @104
   971: 00                       trap
      :                          @105
   972: 00                       trap
