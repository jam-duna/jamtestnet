// RO data = 0/0 bytes
// RW data = 0/0 bytes
// Stack size = 8192 bytes
// Jump table entry point size = 0 bytes
// RO data = []
// RW data = []
// Instructions = 61
// Code size = 184 bytes

      :                          @0
     0: 28 0d 00 00 00           jump @3
      :                          @1
     5: 28 10 00 00 00           jump @4
      :                          @2
    10: 28 aa 00                 jump @8
      :                          @3 [export #0: 'refine']
    13: 33 08 08                 a1 = 0x8
    16: 95 77 04                 a0 = a0 + 0x4
    19: 32 00                    ret
      :                          @4 [export #1: 'accumulate']
    21: 95 11 a0                 sp = sp + 0xffffffffffffffa0
    24: 7b 10 58                 u64 [sp + 0x58] = ra
    27: 7b 15 50                 u64 [sp + 0x50] = s0
    30: c8 78 08                 a1 = a1 + a0
    33: 48 11 08                 u32 [sp + 8] = 0
    36: 49 01                    u64 [sp + 0] = 0
    38: 48 11 18                 u32 [sp + 24] = 0
    41: 49 11 10                 u64 [sp + 16] = 0
    44: 46 11 23                 u8 [sp + 35] = 0
    47: 80 77                    a0 = u32 [a0]
    49: 80 85 fc                 s0 = u32 [a1 + 0xfffffffffffffffc]
    52: 95 18 23                 a1 = sp + 0x23
    55: 33 09 01                 a2 = 0x1
    58: 64 1a                    a3 = sp
    60: 33 0b 0c                 a4 = 0xc
    63: 0a 02                    ecalli 2 // 'read'
    65: 95 18 23                 a1 = sp + 0x23
    68: 33 09 01                 a2 = 0x1
    71: 95 1a 10                 a3 = sp + 0x10
    74: 33 0b 0c                 a4 = 0xc
    77: 64 57                    a0 = s0
    79: 0a 02                    ecalli 2 // 'read'
    81: 81 17 04                 a0 = i32 [sp + 0x4]
    84: 81 18 08                 a1 = i32 [sp + 0x8]
    87: 81 19 14                 a2 = i32 [sp + 0x14]
    90: 81 1a 18                 a3 = i32 [sp + 0x18]
    93: 81 15                    s0 = i32 [sp]
    95: be 97 07                 i32 a0 = a0 + a2
    98: be a8 08                 i32 a1 = a1 + a3
   101: 7a 15 24                 u32 [sp + 0x24] = s0
   104: 7a 17 28                 u32 [sp + 0x28] = a0
   107: 7a 18 2c                 u32 [sp + 0x2c] = a1
   110: 95 17 23                 a0 = sp + 0x23
   113: 33 08 01                 a1 = 0x1
   116: 95 19 24                 a2 = sp + 0x24
   119: 33 0a 0c                 a3 = 0xc
   122: 0a 03                    ecalli 3 // 'write'
   124: 01                       fallthrough
      :                          @5
   125: 14 07 01 01 01 01 01 01 01 01 a0 = 0x101010101010101
   135: 7b 17 48                 u64 [sp + 0x48] = a0
   138: 7b 17 40                 u64 [sp + 0x40] = a0
   141: 7b 17 38                 u64 [sp + 0x38] = a0
   144: 87 58 ab aa aa aa        i32 a1 = s0 * 0xffffffffaaaaaaab
   150: 33 09 55 55 55 55        a2 = 0x55555555
   156: 7b 17 30                 u64 [sp + 0x30] = a0
   159: ae 89 14                 jump @7 if a2 >=u a1
      :                          @6
   162: 33 08 20                 a1 = 0x20
   165: 95 17 30                 a0 = sp + 0x30
   168: 82 10 58                 ra = u64 [sp + 0x58]
   171: 82 15 50                 s0 = u64 [sp + 0x50]
   174: 95 11 60                 sp = sp + 0x60
   177: 32 00                    ret
      :                          @7
   179: 00                       trap
      :                          @8 [export #2: 'on_transfer']
   180: 33 07                    a0 = 0
   182: 32 00                    ret
