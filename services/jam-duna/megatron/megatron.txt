// RO data = 0/0 bytes
// RW data = 0/0 bytes
// Stack size = 8192 bytes
// Jump table entry point size = 0 bytes
// RO data = []
// RW data = []
// Instructions = 50
// Code size = 155 bytes

      :                          @0
     0: 28 0d 00 00 00           jump @3
      :                          @1
     5: 28 17 00 00 00           jump @4
      :                          @2
    10: 28 8d 00                 jump @5
      :                          @3 [export #0: 'refine']
    13: 33 08 08                 a1 = 0x8
    16: 14 07 04 00 ff fe 00 00 00 00 a0 = 0xfeff0004
    26: 32 00                    ret
      :                          @4 [export #1: 'accumulate']
    28: 95 11 c0                 sp = sp + 0xffffffffffffffc0
    31: 7b 10 38                 u64 [sp + 0x38] = ra
    34: 7b 15 30                 u64 [sp + 0x30] = s0
    37: 48 11 08                 u32 [sp + 8] = 0
    40: 49 01                    u64 [sp + 0] = 0
    42: 48 11 18                 u32 [sp + 24] = 0
    45: 49 11 10                 u64 [sp + 16] = 0
    48: 46 11 23                 u8 [sp + 35] = 0
    51: 14 08 00 00 ff fe 00 00 00 00 a1 = 0xfeff0000
    61: 80 87                    a0 = u32 [a1]
    63: 80 85 04                 s0 = u32 [a1 + 0x4]
    66: 95 18 23                 a1 = sp + 0x23
    69: 33 09 01                 a2 = 0x1
    72: 64 1a                    a3 = sp
    74: 33 0b 0c                 a4 = 0xc
    77: 0a 02                    ecalli 2 // 'read'
    79: 95 18 23                 a1 = sp + 0x23
    82: 33 09 01                 a2 = 0x1
    85: 95 1a 10                 a3 = sp + 0x10
    88: 33 0b 0c                 a4 = 0xc
    91: 64 57                    a0 = s0
    93: 0a 02                    ecalli 2 // 'read'
    95: 81 17 04                 a0 = i32 [sp + 0x4]
    98: 81 18 08                 a1 = i32 [sp + 0x8]
   101: 81 19 14                 a2 = i32 [sp + 0x14]
   104: 81 1a 18                 a3 = i32 [sp + 0x18]
   107: 81 1b                    a4 = i32 [sp]
   109: be 97 07                 i32 a0 = a0 + a2
   112: be a8 08                 i32 a1 = a1 + a3
   115: 7a 1b 24                 u32 [sp + 0x24] = a4
   118: 7a 17 28                 u32 [sp + 0x28] = a0
   121: 7a 18 2c                 u32 [sp + 0x2c] = a1
   124: 95 17 23                 a0 = sp + 0x23
   127: 33 08 01                 a1 = 0x1
   130: 95 19 24                 a2 = sp + 0x24
   133: 33 0a 0c                 a3 = 0xc
   136: 0a 03                    ecalli 3 // 'write'
   138: 33 07                    a0 = 0
   140: 82 10 38                 ra = u64 [sp + 0x38]
   143: 82 15 30                 s0 = u64 [sp + 0x30]
   146: 95 11 40                 sp = sp + 0x40
   149: 32 00                    ret
      :                          @5 [export #2: 'on_transfer']
   151: 33 07                    a0 = 0
   153: 32 00                    ret
