// RO data = 0/0 bytes
// RW data = 0/0 bytes
// Stack size = 8192 bytes
// Jump table entry point size = 0 bytes
// RO data = []
// RW data = []
// Instructions = 61
// Code size = 169 bytes

      :                          @0
     0: 28 12 00 00 00           jump @4
      :                          @1
     5: 28 11 00 00 00           jump @5
      :                          @2
    10: 28 73 00 00 00           jump @10
      :                          @3
    15: 28 96 00                 jump @11
      :                          @4 [export #0: 'is_authorized']
    18: 33 07                    a0 = 0
    20: 32 00                    ret
      :                          @5 [export #1: 'refine']
    22: 95 11 d8                 sp = sp + 0xffffffffffffffd8
    25: 7b 10 20                 u64 [sp + 0x20] = ra
    28: 7b 15 18                 u64 [sp + 0x18] = s0
    31: 7b 16 10                 u64 [sp + 0x10] = s1
    34: 48 11 08                 u32 [sp + 8] = 0
    37: 49 01                    u64 [sp + 0] = 0
    39: 64 17                    a0 = sp
    41: 33 09 0c                 a2 = 0xc
    44: 33 0a 05                 a3 = 0x5
    47: 33 08                    a1 = 0
    49: 33 0b                    a4 = 0
    51: 33 0c                    a5 = 0
    53: 0a 12                    ecalli 18 // 'fetch'
    55: 01                       fallthrough
      :                          @6
    56: 51 17 ff 14              jump @8 if a0 == 4294967295
      :                          @7
    60: 81 17 04                 a0 = i32 [sp + 0x4]
    63: 81 18 08                 a1 = i32 [sp + 0x8]
    66: 81 19                    a2 = i32 [sp]
    68: be 78 08                 i32 a1 = a1 + a0
    71: 83 99 01                 i32 a2 = a2 + 0x1
    74: 28 0b                    jump @9
      :                          @8
    76: 33 07                    a0 = 0
    78: 33 09 01                 a2 = 0x1
    81: 33 08 01                 a1 = 0x1
    84: 01                       fallthrough
      :                          @9
    85: 7a 19                    u32 [sp] = a2
    87: 7a 18 04                 u32 [sp + 0x4] = a1
    90: 7a 17 08                 u32 [sp + 0x8] = a0
    93: 64 15                    s0 = sp
    95: 33 06 0c                 s1 = 0xc
    98: 64 17                    a0 = sp
   100: 33 08 0c                 a1 = 0xc
   103: 0a 13                    ecalli 19 // 'export'
   105: 64 5a                    a3 = s0
   107: 64 6b                    a4 = s1
   109: 33 07                    a0 = 0
   111: 82 10 20                 ra = u64 [sp + 0x20]
   114: 82 15 18                 s0 = u64 [sp + 0x18]
   117: 82 16 10                 s1 = u64 [sp + 0x10]
   120: 95 11 28                 sp = sp + 0x28
   123: 32 00                    ret
      :                          @10 [export #2: 'accumulate']
   125: 95 11 f0                 sp = sp + 0xfffffffffffffff0
   128: 7b 10 08                 u64 [sp + 0x8] = ra
   131: 46 11 07                 u8 [sp + 7] = 0
   134: 14 09 00 00 ff fe 00 00 00 00 a2 = 0xfeff0000
   144: 95 17 07                 a0 = sp + 0x7
   147: 33 08 01                 a1 = 0x1
   150: 33 0a 0c                 a3 = 0xc
   153: 0a 03                    ecalli 3 // 'write'
   155: 33 07                    a0 = 0
   157: 82 10 08                 ra = u64 [sp + 0x8]
   160: 95 11 10                 sp = sp + 0x10
   163: 32 00                    ret
      :                          @11 [export #3: 'on_transfer']
   165: 33 07                    a0 = 0
   167: 32 00                    ret
