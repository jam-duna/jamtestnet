// RO data = 0/0 bytes
// RW data = 0/0 bytes
// Stack size = 8192 bytes
// Jump table entry point size = 0 bytes
// RO data = []
// RW data = []
// Instructions = 54
// Code size = 150 bytes

      :                          @0
     0: 28 0d 00 00 00           jump @3
      :                          @1
     5: 28 65 00 00 00           jump @8
      :                          @2
    10: 28 88 00                 jump @9
      :                          @3 [export #0: 'refine']
    13: 95 11 e0                 sp = sp + 0xffffffffffffffe0
    16: 7b 10 18                 u64 [sp + 0x18] = ra
    19: 7b 15 10                 u64 [sp + 0x10] = s0
    22: 48 11 08                 u32 [sp + 8] = 0
    25: 49 01                    u64 [sp + 0] = 0
    27: 64 17                    a0 = sp
    29: 33 09 0c                 a2 = 0xc
    32: 33 0a 05                 a3 = 0x5
    35: 33 08                    a1 = 0
    37: 33 0b                    a4 = 0
    39: 33 0c                    a5 = 0
    41: 0a 12                    ecalli 18 // 'fetch'
    43: 01                       fallthrough
      :                          @4
    44: 51 17 ff 14              jump @6 if a0 == 4294967295
      :                          @5
    48: 81 17 04                 a0 = i32 [sp + 0x4]
    51: 81 18 08                 a1 = i32 [sp + 0x8]
    54: 81 19                    a2 = i32 [sp]
    56: be 78 08                 i32 a1 = a1 + a0
    59: 83 99 01                 i32 a2 = a2 + 0x1
    62: 28 0b                    jump @7
      :                          @6
    64: 33 07                    a0 = 0
    66: 33 09 01                 a2 = 0x1
    69: 33 08 01                 a1 = 0x1
    72: 01                       fallthrough
      :                          @7
    73: 7a 19                    u32 [sp] = a2
    75: 7a 18 04                 u32 [sp + 0x4] = a1
    78: 7a 17 08                 u32 [sp + 0x8] = a0
    81: 33 05 0c                 s0 = 0xc
    84: 64 17                    a0 = sp
    86: 33 08 0c                 a1 = 0xc
    89: 0a 13                    ecalli 19 // 'export'
    91: 64 58                    a1 = s0
    93: 64 17                    a0 = sp
    95: 82 10 18                 ra = u64 [sp + 0x18]
    98: 82 15 10                 s0 = u64 [sp + 0x10]
   101: 95 11 20                 sp = sp + 0x20
   104: 32 00                    ret
      :                          @8 [export #1: 'accumulate']
   106: 95 11 f0                 sp = sp + 0xfffffffffffffff0
   109: 7b 10 08                 u64 [sp + 0x8] = ra
   112: 46 11 07                 u8 [sp + 7] = 0
   115: 14 09 00 00 ff fe 00 00 00 00 a2 = 0xfeff0000
   125: 95 17 07                 a0 = sp + 0x7
   128: 33 08 01                 a1 = 0x1
   131: 33 0a 0c                 a3 = 0xc
   134: 0a 03                    ecalli 3 // 'write'
   136: 33 07                    a0 = 0
   138: 82 10 08                 ra = u64 [sp + 0x8]
   141: 95 11 10                 sp = sp + 0x10
   144: 32 00                    ret
      :                          @9 [export #2: 'on_transfer']
   146: 33 07                    a0 = 0
   148: 32 00                    ret
