// RO data = 0/0 bytes
// RW data = 0/0 bytes
// Stack size = 8192 bytes
// Jump table entry point size = 2 bytes
// RO data = []
// RW data = []
// Instructions = 348
// Code size = 1014 bytes

      :                          @0
     0: 28 ab 00 00 00           jump @27
      :                          @1
     5: 28 03 01 00 00           jump @32
      :                          @2
    10: 28 36 03                 jump @89
      :                          @3
    13: 51 08 9b 00              jump @24 if a1 == 0
      :                          @4
    17: 64 79                    a2 = a0
    19: 7c 77                    a0 = u8 [a0]
    21: 51 07 91 00              jump @23 if a0 == 0
      :                          @5
    25: 51 27 ff 00 90 00        jump @25 if a0 == 255
      :                          @6
    31: 6c 7a                    a3 = sext.b a0
    33: 57 0a 09                 jump @8 if a3 <s 0
      :                          @7
    36: 33 0a                    a3 = 0
    38: 33 08                    a1 = 0
    40: 28 73                    jump @22
      :                          @8
    42: 55 27 c0 00 0d           jump @10 if a0 >=u 192
      :                          @9
    47: 33 0a 01                 a3 = 0x1
    50: 33 0b 80                 a4 = 0xffffffffffffff80
    53: 28 4a                    jump @19
      :                          @10
    55: 55 27 e0 00 0e           jump @12 if a0 >=u 224
      :                          @11
    60: 33 0a 02                 a3 = 0x2
    63: 33 0b 40 ff              a4 = 0xffffffffffffff40
    67: 28 3c                    jump @19
      :                          @12
    69: 55 27 f0 00 0e           jump @14 if a0 >=u 240
      :                          @13
    74: 33 0a 03                 a3 = 0x3
    77: 33 0b 20 ff              a4 = 0xffffffffffffff20
    81: 28 2e                    jump @19
      :                          @14
    83: 55 27 f8 00 0e           jump @16 if a0 >=u 248
      :                          @15
    88: 33 0a 04                 a3 = 0x4
    91: 33 0b 10 ff              a4 = 0xffffffffffffff10
    95: 28 20                    jump @19
      :                          @16
    97: 55 27 fc 00 0e           jump @18 if a0 >=u 252
      :                          @17
   102: 33 0a 05                 a3 = 0x5
   105: 33 0b 08 ff              a4 = 0xffffffffffffff08
   109: 28 12                    jump @19
      :                          @18
   111: 88 7a fe 00              a3 = a0 <u 0xfe
   115: 33 0b 04 ff              a4 = 0xffffffffffffff04
   119: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
   123: 85 aa 07                 a3 = a3 ^ 0x7
   126: 01                       fallthrough
      :                          @19
   127: ae 8a 2b                 jump @26 if a3 >=u a1
      :                          @20
   130: 33 08                    a1 = 0
   132: c8 b7 07                 a0 = a0 + a4
   135: 64 ab                    a4 = a3
   137: 01                       fallthrough
      :                          @21
   138: c8 b9 0c                 a5 = a2 + a4
   141: 7c cc                    a5 = u8 [a5]
   143: 97 88 08                 a1 = a1 << 0x8
   146: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
   149: d4 c8 08                 a1 = a1 | a5
   152: 52 0b f2                 jump @21 if a4 != 0
      :                          @22
   155: 8a a9 03                 i32 a2 = a3 << 0x3
   158: cf 97 07                 a0 = a0 << a2
   161: c8 87 07                 a0 = a0 + a1
   164: 32 00                    ret
      :                          @23
   166: 32 00                    ret
      :                          @24
   168: 00                       trap
      :                          @25
   169: 00                       trap
      :                          @26
   170: 00                       trap
      :                          @27 [export #0: 'refine']
   171: 95 11 e0                 sp = sp + 0xffffffffffffffe0
   174: 7b 10 18                 u64 [sp + 0x18] = ra
   177: 7b 15 10                 u64 [sp + 0x10] = s0
   180: 48 11 08                 u32 [sp + 8] = 0
   183: 49 01                    u64 [sp + 0] = 0
   185: 64 17                    a0 = sp
   187: 33 09 0c                 a2 = 0xc
   190: 33 0a 05                 a3 = 0x5
   193: 33 08                    a1 = 0
   195: 33 0b                    a4 = 0
   197: 33 0c                    a5 = 0
   199: 0a 12                    ecalli 18 // 'fetch'
   201: 01                       fallthrough
      :                          @28
   202: 51 17 ff 14              jump @30 if a0 == 4294967295
      :                          @29
   206: 81 17 04                 a0 = i32 [sp + 0x4]
   209: 81 18 08                 a1 = i32 [sp + 0x8]
   212: 81 19                    a2 = i32 [sp]
   214: be 78 08                 i32 a1 = a1 + a0
   217: 83 99 01                 i32 a2 = a2 + 0x1
   220: 28 0b                    jump @31
      :                          @30
   222: 33 07                    a0 = 0
   224: 33 09 01                 a2 = 0x1
   227: 33 08 01                 a1 = 0x1
   230: 01                       fallthrough
      :                          @31
   231: 7a 19                    u32 [sp] = a2
   233: 7a 18 04                 u32 [sp + 0x4] = a1
   236: 7a 17 08                 u32 [sp + 0x8] = a0
   239: 33 05 0c                 s0 = 0xc
   242: 64 17                    a0 = sp
   244: 33 08 0c                 a1 = 0xc
   247: 0a 13                    ecalli 19 // 'export'
   249: 64 58                    a1 = s0
   251: 64 17                    a0 = sp
   253: 82 10 18                 ra = u64 [sp + 0x18]
   256: 82 15 10                 s0 = u64 [sp + 0x10]
   259: 95 11 20                 sp = sp + 0x20
   262: 32 00                    ret
      :                          @32 [export #1: 'accumulate']
   264: 95 11 b8                 sp = sp + 0xffffffffffffffb8
   267: 7b 10 40                 u64 [sp + 0x40] = ra
   270: 7b 15 38                 u64 [sp + 0x38] = s0
   273: 7b 16 30                 u64 [sp + 0x30] = s1
   276: 64 85                    s0 = a1
   278: 95 55 f8                 s0 = s0 + 0xfffffffffffffff8
   281: 51 05 21 02              jump @83 if s0 == 0
      :                          @33
   285: 95 77 08                 a0 = a0 + 0x8
   288: 7d 78                    a1 = i8 [a0]
   290: 33 06 01                 s1 = 0x1
   293: 5a 08 5d                 jump @41 if a1 >s 0
      :                          @34
   296: 84 8a ff 00              a3 = a1 & 0xff
   300: 83 a8 ff                 i32 a1 = a3 + 0xffffffffffffffff
   303: 84 88 ff 00              a1 = a1 & 0xff
   307: 33 06 02                 s1 = 0x2
   310: 53 28 bf 00 4c           jump @41 if a1 <u 191
      :                          @35
   315: 84 a8 e0 00              a1 = a3 & 0xe0
   319: 33 06 03                 s1 = 0x3
   322: 51 28 c0 00 40           jump @41 if a1 == 192
      :                          @36
   327: 84 a8 f0 00              a1 = a3 & 0xf0
   331: 33 06 04                 s1 = 0x4
   334: 51 28 e0 00 34           jump @41 if a1 == 224
      :                          @37
   339: 84 a8 f8 00              a1 = a3 & 0xf8
   343: 33 06 05                 s1 = 0x5
   346: 51 28 f0 00 28           jump @41 if a1 == 240
      :                          @38
   351: 84 a8 fc 00              a1 = a3 & 0xfc
   355: 33 06 06                 s1 = 0x6
   358: 51 28 f8 00 1c           jump @41 if a1 == 248
      :                          @39
   363: 84 a8 fe 00              a1 = a3 & 0xfe
   367: 33 06 07                 s1 = 0x7
   370: 51 28 fc 00 10           jump @41 if a1 == 252
      :                          @40
   375: 88 a8 fe 00              a1 = a3 <u 0xfe
   379: 85 86 01                 s1 = a1 ^ 0x1
   382: 97 66 03                 s1 = s1 << 0x3
   385: 01                       fallthrough
      :                          @41
   386: 7b 15                    u64 [sp] = s0
   388: ac 65 b7 01              jump @84 if s0 <u s1
      :                          @42
   392: 64 75                    s0 = a0
   394: 64 68                    a1 = s1
   396: 50 10 02 81 fe           ra = 2, jump @3
      :                          @43 [@dyn 1]
   401: 51 07 28                 jump @48 if a0 == 0
      :                          @44
   404: 82 19                    a2 = u64 [sp]
   406: aa 69 a7 01              jump @86 if a2 == s1
      :                          @45
   410: c8 56 07                 a0 = s1 + s0
   413: 7c 78                    a1 = u8 [a0]
   415: 95 7b 01                 a4 = a0 + 0x1
   418: 85 67 ff                 a0 = s1 ^ 0xffffffffffffffff
   421: c8 79 05                 s0 = a2 + a0
   424: 51 08 18                 jump @49 if a1 == 0
      :                          @46
   427: 33 0a                    a3 = 0
   429: 33 06                    s1 = 0
   431: 95 58 c0                 a1 = s0 + 0xffffffffffffffc0
   434: 52 08 9f 00              jump @63 if a1 != 0
      :                          @47
   438: 28 1a 01                 jump @74
      :                          @48
   441: 33 0a                    a3 = 0
   443: 33 06                    s1 = 0
   445: 28 13 01                 jump @74
      :                          @49
   448: 51 05 79                 jump @61 if s0 == 0
      :                          @50
   451: 7d b7                    a0 = i8 [a4]
   453: 33 06 01                 s1 = 0x1
   456: 5a 07 5a                 jump @58 if a0 >s 0
      :                          @51
   459: 84 77 ff 00              a0 = a0 & 0xff
   463: 83 78 ff                 i32 a1 = a0 + 0xffffffffffffffff
   466: 84 8a ff 00              a3 = a1 & 0xff
   470: 33 06 02                 s1 = 0x2
   473: 53 2a bf 00 49           jump @58 if a3 <u 191
      :                          @52
   478: 84 7a e0 00              a3 = a0 & 0xe0
   482: 33 06 03                 s1 = 0x3
   485: 51 2a c0 00 3d           jump @58 if a3 == 192
      :                          @53
   490: 84 7a f0 00              a3 = a0 & 0xf0
   494: 33 06 04                 s1 = 0x4
   497: 51 2a e0 00 31           jump @58 if a3 == 224
      :                          @54
   502: 84 7a f8 00              a3 = a0 & 0xf8
   506: 33 06 05                 s1 = 0x5
   509: 51 2a f0 00 25           jump @58 if a3 == 240
      :                          @55
   514: 84 7a fc 00              a3 = a0 & 0xfc
   518: 33 06 06                 s1 = 0x6
   521: 51 2a f8 00 19           jump @58 if a3 == 248
      :                          @56
   526: 84 7a fe 00              a3 = a0 & 0xfe
   530: 33 06 07                 s1 = 0x7
   533: 51 2a fc 00 0d           jump @58 if a3 == 252
      :                          @57
   538: 33 06 08                 s1 = 0x8
   541: 53 27 fe 00 1c           jump @61 if a0 <u 254
      :                          @58
   546: ac 65 1c 01              jump @87 if s0 <u s1
      :                          @59
   550: 64 b7                    a0 = a4
   552: 64 68                    a1 = s1
   554: 7b 1b                    u64 [sp] = a4
   556: 50 10 04 e1 fd           ra = 4, jump @3
      :                          @60 [@dyn 2]
   561: 64 68                    a1 = s1
   563: 82 1b                    a4 = u64 [sp]
   565: 64 7a                    a3 = a0
   567: 28 07                    jump @62
      :                          @61
   569: 33 08                    a1 = 0
   571: 33 0a                    a3 = 0
   573: 01                       fallthrough
      :                          @62
   574: c8 8b 06                 s1 = a4 + a1
   577: c8 a6 0b                 a4 = s1 + a3
   580: c8 8a 07                 a0 = a3 + a1
   583: c9 75 05                 s0 = s0 - a0
   586: 95 58 c0                 a1 = s0 + 0xffffffffffffffc0
   589: 51 08 83 00              jump @74 if a1 == 0
      :                          @63
   593: 95 b7 40                 a0 = a4 + 0x40
   596: 7d 7b                    a4 = i8 [a0]
   598: 33 09 01                 a2 = 0x1
   601: 5a 0b 6b                 jump @72 if a4 >s 0
      :                          @64
   604: 84 b5 ff 00              s0 = a4 & 0xff
   608: 83 59 ff                 i32 a2 = s0 + 0xffffffffffffffff
   611: 84 9b ff 00              a4 = a2 & 0xff
   615: 33 0c bf 00              a5 = 0xbf
   619: 33 09 02                 a2 = 0x2
   622: ac cb 53                 jump @71 if a4 <u a5
      :                          @65
   625: 84 5b e0 00              a4 = s0 & 0xe0
   629: 33 0c c0 00              a5 = 0xc0
   633: 33 09 03                 a2 = 0x3
   636: aa cb 45                 jump @71 if a4 == a5
      :                          @66
   639: 84 5b f0 00              a4 = s0 & 0xf0
   643: 33 0c e0 00              a5 = 0xe0
   647: 33 09 04                 a2 = 0x4
   650: aa cb 37                 jump @71 if a4 == a5
      :                          @67
   653: 84 5b f8 00              a4 = s0 & 0xf8
   657: 33 0c f0 00              a5 = 0xf0
   661: 33 09 05                 a2 = 0x5
   664: aa cb 29                 jump @71 if a4 == a5
      :                          @68
   667: 84 5b fc 00              a4 = s0 & 0xfc
   671: 33 0c f8 00              a5 = 0xf8
   675: 33 09 06                 a2 = 0x6
   678: aa cb 1b                 jump @71 if a4 == a5
      :                          @69
   681: 84 5b fe 00              a4 = s0 & 0xfe
   685: 33 0c fc 00              a5 = 0xfc
   689: 33 09 07                 a2 = 0x7
   692: aa cb 0d                 jump @71 if a4 == a5
      :                          @70
   695: 33 0b fe 00              a4 = 0xfe
   699: 33 09 08                 a2 = 0x8
   702: ac b5 12                 jump @74 if s0 <u a4
      :                          @71
   705: ac 98 7e                 jump @88 if a1 <u a2
      :                          @72
   708: 64 98                    a1 = a2
   710: 64 a5                    s0 = a3
   712: 50 10 06 45 fd           ra = 6, jump @3
      :                          @73 [@dyn 3]
   717: 64 5a                    a3 = s0
   719: 01                       fallthrough
      :                          @74
   720: 46 11 0f                 u8 [sp + 15] = 0
   723: 81 67                    a0 = i32 [s1]
   725: 7b 17                    u64 [sp] = a0
   727: 95 17 0f                 a0 = sp + 0xf
   730: 33 08 01                 a1 = 0x1
   733: 64 69                    a2 = s1
   735: 64 65                    s0 = s1
   737: 64 a6                    s1 = a3
   739: 0a 03                    ecalli 3 // 'write'
   741: 01                       fallthrough
      :                          @75
   742: 49 11 28                 u64 [sp + 40] = 0
   745: 49 11 20                 u64 [sp + 32] = 0
   748: 49 11 18                 u64 [sp + 24] = 0
   751: 49 11 10                 u64 [sp + 16] = 0
   754: 55 16 21 4a              jump @85 if s1 >=u 33
      :                          @76
   758: 95 17 10                 a0 = sp + 0x10
   761: 64 58                    a1 = s0
   763: 64 69                    a2 = s1
   765: 50 10 08 47              ra = 8, jump @90
      :                          @77 [@dyn 4]
   769: 82 15                    s0 = u64 [sp]
   771: 87 57 ab aa aa aa        i32 a0 = s0 * 0xffffffffaaaaaaab
   777: 53 47 56 55 55 55 15     jump @80 if a0 <u 1431655766
      :                          @78
   784: 84 55 01                 s0 = s0 & 0x1
   787: 52 05 12                 jump @81 if s0 != 0
      :                          @79
   790: 33 08 01                 a1 = 0x1
   793: 33 07 01                 a0 = 0x1
   796: 28 10                    jump @82
      :                          @80
   798: 33 07                    a0 = 0
   800: 33 08 01                 a1 = 0x1
   803: 32 07                    jump [a0]
      :                          @81
   805: 33 08 20                 a1 = 0x20
   808: 95 17 10                 a0 = sp + 0x10
   811: 01                       fallthrough
      :                          @82
   812: 82 10 40                 ra = u64 [sp + 0x40]
   815: 82 15 38                 s0 = u64 [sp + 0x38]
   818: 82 16 30                 s1 = u64 [sp + 0x30]
   821: 95 11 48                 sp = sp + 0x48
   824: 32 00                    ret
      :                          @83
   826: 00                       trap
      :                          @84
   827: 00                       trap
      :                          @85
   828: 00                       trap
      :                          @86
   829: 00                       trap
      :                          @87
   830: 00                       trap
      :                          @88
   831: 00                       trap
      :                          @89 [export #2: 'on_transfer']
   832: 33 07                    a0 = 0
   834: 32 00                    ret
      :                          @90
   836: 95 11 e0                 sp = sp + 0xffffffffffffffe0
   839: 7b 10 18                 u64 [sp + 0x18] = ra
   842: 7b 15 10                 u64 [sp + 0x10] = s0
   845: 7b 16 08                 u64 [sp + 0x8] = s1
   848: 53 19 10 64              jump @99 if a2 <u 16
      :                          @91
   852: 8d 7a                    i32 a3 = -a0
   854: 84 a2 07                 t0 = a3 & 0x7
   857: c8 27 0b                 a4 = a0 + t0
   860: 51 02 15                 jump @94 if t0 == 0
      :                          @92
   863: 64 8c                    a5 = a1
   865: 64 75                    s0 = a0
   867: 01                       fallthrough
      :                          @93
   868: 7c ca                    a3 = u8 [a5]
   870: 78 5a                    u8 [s0] = a3
   872: 95 55 01                 s0 = s0 + 0x1
   875: 95 cc 01                 a5 = a5 + 0x1
   878: ac b5 f6                 jump @93 if s0 <u a4
      :                          @94
   881: c8 28 03                 t1 = a1 + t0
   884: c9 29 02                 t0 = a2 - t0
   887: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
   890: 84 38 07                 a1 = t1 & 0x7
   893: c8 4b 0a                 a3 = a4 + t2
   896: 51 08 3b                 jump @101 if a1 == 0
      :                          @95
   899: 58 04 4b                 jump @104 if t2 <=s 0
      :                          @96
   902: 97 38 03                 a1 = t1 << 0x3
   905: 84 80 38                 ra = a1 & 0x38
   908: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
   911: 82 c5                    s0 = u64 [a5]
   913: 8d 88                    i32 a1 = -a1
   915: 84 88 38                 a1 = a1 & 0x38
   918: 95 cc 08                 a5 = a5 + 0x8
   921: 01                       fallthrough
      :                          @97
   922: 82 c6                    s1 = u64 [a5]
   924: d0 05 05                 s0 = s0 >> ra
   927: cf 86 09                 a2 = s1 << a1
   930: d4 59 09                 a2 = a2 | s0
   933: 7b b9                    u64 [a4] = a2
   935: 95 bb 08                 a4 = a4 + 0x8
   938: 95 cc 08                 a5 = a5 + 0x8
   941: 64 65                    s0 = s1
   943: ac ab eb                 jump @97 if a4 <u a3
      :                          @98
   946: 28 1c                    jump @104
      :                          @99
   948: 64 7a                    a3 = a0
   950: 52 09 21                 jump @105 if a2 != 0
      :                          @100
   953: 28 2f                    jump @107
      :                          @101
   955: 58 04 13                 jump @104 if t2 <=s 0
      :                          @102
   958: 64 38                    a1 = t1
   960: 01                       fallthrough
      :                          @103
   961: 82 89                    a2 = u64 [a1]
   963: 7b b9                    u64 [a4] = a2
   965: 95 bb 08                 a4 = a4 + 0x8
   968: 95 88 08                 a1 = a1 + 0x8
   971: ac ab f6                 jump @103 if a4 <u a3
      :                          @104
   974: c8 43 08                 a1 = t1 + t2
   977: 84 29 07                 a2 = t0 & 0x7
   980: 51 09 14                 jump @107 if a2 == 0
      :                          @105
   983: c8 a9 09                 a2 = a2 + a3
   986: 01                       fallthrough
      :                          @106
   987: 7c 8b                    a4 = u8 [a1]
   989: 78 ab                    u8 [a3] = a4
   991: 95 aa 01                 a3 = a3 + 0x1
   994: 95 88 01                 a1 = a1 + 0x1
   997: ac 9a f6                 jump @106 if a3 <u a2
      :                          @107
  1000: 82 10 18                 ra = u64 [sp + 0x18]
  1003: 82 15 10                 s0 = u64 [sp + 0x10]
  1006: 82 16 08                 s1 = u64 [sp + 0x8]
  1009: 95 11 20                 sp = sp + 0x20
  1012: 32 00                    ret
